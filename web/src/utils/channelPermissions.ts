// Types et utilitaires pour la gestion des r√¥les et permissions des canaux

export type ChannelRole = 'admin' | 'member' | 'guest' | 'invit√©';

export interface ChannelPermissions {
  // Permissions de lecture
  canRead: boolean;

  // Permissions d'√©criture
  canWrite: boolean;
  canSendFiles: boolean;
  canReact: boolean;

  // Permissions sur les messages
  canEditOwnMessages: boolean;
  canDeleteOwnMessages: boolean;
  canEditAnyMessage: boolean;
  canDeleteAnyMessage: boolean;
  canPinMessages: boolean;

  // Permissions de gestion
  canManageMembers: boolean;
  canInviteMembers: boolean;
  canRemoveMembers: boolean;
  canChangeRoles: boolean;

  // Permissions de canal
  canEditChannel: boolean;
  canDeleteChannel: boolean;
  canArchiveChannel: boolean;

  // Permissions de mod√©ration
  canModerate: boolean;
  canManageBots: boolean;
  canManageIntegrations: boolean;

  // Permissions sp√©ciales
  canSeeAllMembers: boolean;
  canAccessPublicChannels: boolean;
  canSearchChannels: boolean;
}

/**
 * Retourne les permissions par d√©faut pour un r√¥le donn√©
 */
export const getDefaultPermissions = (
  role: ChannelRole
): ChannelPermissions => {
  const basePermissions: ChannelPermissions = {
    canRead: false,
    canWrite: false,
    canSendFiles: false,
    canReact: false,
    canEditOwnMessages: false,
    canDeleteOwnMessages: false,
    canEditAnyMessage: false,
    canDeleteAnyMessage: false,
    canPinMessages: false,
    canManageMembers: false,
    canInviteMembers: false,
    canRemoveMembers: false,
    canChangeRoles: false,
    canEditChannel: false,
    canDeleteChannel: false,
    canArchiveChannel: false,
    canModerate: false,
    canManageBots: false,
    canManageIntegrations: false,
    canSeeAllMembers: false,
    canAccessPublicChannels: false,
    canSearchChannels: false,
  };

  switch (role) {
    case 'admin':
      return {
        ...basePermissions,
        // Permissions compl√®tes pour l'admin
        canRead: true,
        canWrite: true,
        canSendFiles: true,
        canReact: true,
        canEditOwnMessages: true,
        canDeleteOwnMessages: true,
        canEditAnyMessage: true,
        canDeleteAnyMessage: true,
        canPinMessages: true,
        canManageMembers: true,
        canInviteMembers: true,
        canRemoveMembers: true,
        canChangeRoles: true,
        canEditChannel: true,
        canDeleteChannel: true,
        canArchiveChannel: true,
        canModerate: true,
        canManageBots: true,
        canManageIntegrations: true,
        canSeeAllMembers: true,
        canAccessPublicChannels: true,
        canSearchChannels: true,
      };

    case 'member':
      return {
        ...basePermissions,
        // Permissions de membre contributeur
        canRead: true,
        canWrite: true,
        canSendFiles: true,
        canReact: true,
        canEditOwnMessages: true,
        canDeleteOwnMessages: true,
        canAccessPublicChannels: true,
        canSearchChannels: true,
        // Ne peut PAS : g√©rer membres, modifier canal, mod√©rer
      };
    case 'guest':
      return {
        ...basePermissions,
        // Permissions limit√©es pour l'invit√©
        canRead: true,
        // canWrite et canSendFiles requi√®rent autorisation explicite de l'admin
        canWrite: false, // Par d√©faut, les guests ne peuvent pas √©crire
        canSendFiles: false, // Par d√©faut, les guests ne peuvent pas envoyer de fichiers
        canEditOwnMessages: true,
        canDeleteOwnMessages: true,
        // Ne peut PAS : acc√©der canaux publics, chercher, g√©rer, mod√©rer
        canAccessPublicChannels: false,
        canSearchChannels: false,
      };
    case 'invit√©':
      return {
        ...basePermissions,
        // Permissions pour l'invit√© (invit√© par admin)
        canRead: true,
        canWrite: false, // Par d√©faut, les invit√©s ne peuvent pas √©crire
        canSendFiles: false, // Par d√©faut, les invit√©s ne peuvent pas envoyer de fichiers
        canEditOwnMessages: true,
        canDeleteOwnMessages: true,
        // Ne peut PAS : acc√©der canaux publics, chercher, g√©rer, mod√©rer
        canAccessPublicChannels: false,
        canSearchChannels: false,
      };

    default:
      return basePermissions;
  }
};

/**
 * V√©rifie si un utilisateur a une permission sp√©cifique
 */
export const hasPermission = (
  userRole: ChannelRole,
  permission: keyof ChannelPermissions,
  customPermissions?: Partial<ChannelPermissions>
): boolean => {
  const defaultPerms = getDefaultPermissions(userRole);
  const finalPerms = { ...defaultPerms, ...customPermissions };
  return finalPerms[permission];
};

/**
 * V√©rifie si un guest peut √©crire (selon autorisation admin)
 */
export const canGuestWrite = (
  guestPermissions?: Partial<ChannelPermissions>
): boolean => {
  return guestPermissions?.canWrite === true;
};

/**
 * V√©rifie si un guest peut envoyer des fichiers (selon autorisation admin)
 */
export const canGuestSendFiles = (
  guestPermissions?: Partial<ChannelPermissions>
): boolean => {
  return guestPermissions?.canSendFiles === true;
};

/**
 * V√©rifie les permissions en tenant compte des autorisations sp√©ciales pour les guests
 */
export const hasPermissionWithGuestOverride = (
  userRole: ChannelRole,
  permission: keyof ChannelPermissions,
  customPermissions?: Partial<ChannelPermissions>
): boolean => {
  // Pour les guests, v√©rifier les permissions personnalis√©es d'abord
  if (userRole === 'guest' && customPermissions) {
    if (permission === 'canWrite' && customPermissions.canWrite !== undefined) {
      return customPermissions.canWrite;
    }
    if (
      permission === 'canSendFiles' &&
      customPermissions.canSendFiles !== undefined
    ) {
      return customPermissions.canSendFiles;
    }
  }

  return hasPermission(userRole, permission, customPermissions);
};

/**
 * Retourne le label d'affichage pour un r√¥le
 */
export const getRoleLabel = (role: ChannelRole): string => {
  switch (role) {
    case 'admin':
      return 'Admin de canal';
    case 'member':
      return 'Membre';
    case 'guest':
      return 'Invit√©';
    case 'invit√©':
      return 'Invit√© (par admin)';
    default:
      return 'Inconnu';
  }
};

/**
 * Retourne la description des permissions pour un r√¥le
 */
export const getRoleDescription = (role: ChannelRole): string => {
  switch (role) {
    case 'admin':
      return 'Peut renommer, archiver ou supprimer le canal. Inviter/exclure des membres, changer leurs r√¥les. G√©rer toutes les permissions et mod√©rer.';
    case 'member':
      return 'Peut lire tout le contenu, envoyer messages/fichiers/r√©actions. Modifie/supprime ses propres messages uniquement.';
    case 'guest':
      return "Peut lire les messages. L'√©criture et l'envoi de fichiers d√©pendent des autorisations accord√©es par un admin.";
    case 'invit√©':
      return "Peut lire les messages. L'√©criture et l'envoi de fichiers ne sont pas autoris√©s par d√©faut.";
    default:
      return '';
  }
};

/**
 * Retourne l'ic√¥ne repr√©sentative d'un r√¥le
 */
export const getRoleIcon = (role: ChannelRole): string => {
  switch (role) {
    case 'admin':
      return 'üëë';
    case 'member':
      return 'üë§';
    case 'guest':
      return 'üîí';
    case 'invit√©':
      return 'üîë'; // Cl√© pour invit√© (invit√© par admin)
    default:
      return '‚ùì';
  }
};

/**
 * Retourne la couleur CSS pour un r√¥le
 */
export const getRoleColor = (role: ChannelRole): string => {
  switch (role) {
    case 'admin':
      return 'var(--color-error)'; // Rouge pour admin
    case 'member':
      return 'var(--color-primary)'; // Bleu pour membre
    case 'guest':
      return 'var(--color-warning)'; // Orange pour invit√©
    case 'invit√©':
      return 'var(--color-info)'; // Vert pour invit√© (invit√© par admin)
    default:
      return 'var(--color-text-secondary)';
  }
};
