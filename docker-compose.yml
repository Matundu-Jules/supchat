services:
  # Backend API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev # Use development Dockerfile
    ports:
      - "0.0.0.0:3000:3000" # bind API port to all interfaces for mobile access
    volumes:
      - ./api:/usr/src/app
      - /usr/src/app/node_modules # Preserve node_modules in container
    networks:
      - supchat-network
    environment:
      # Environment configuration (définis APRÈS env_file pour avoir priorité)
      - NODE_ENV=development # Force development mode for dev docker-compose
      - PORT=3000 # API port
      - CSRF_DEV_MODE=true # Force CSRF dev mode for cross-origin requests

      # Database configuration
      - MONGO_HOST=db # Always use 'db' service in Docker
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_AUTH_SOURCE=${MONGO_AUTH_SOURCE}

      # Security secrets
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH=${JWT_REFRESH}
      - CSRF_SECRET=${CSRF_SECRET}

      # OAuth credentials
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_REDIRECT_URI=${FACEBOOK_REDIRECT_URI}

      # Email configuration
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_PASS=${GMAIL_PASS}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Web client (React)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev # Use development Dockerfile
    ports:
      - "0.0.0.0:80:8080" # expose on all interfaces for mobile/remote access
    volumes:
      - ./web:/app
      - /app/node_modules # Preserve node_modules in container
    networks:
      - supchat-network
    env_file:
      - .env
    environment:
      # Client configuration (URLs managed by update script)
      - VITE_API_URL=${VITE_API_URL:-/api}
      - VITE_WEBSOCKET_URL=${VITE_WEBSOCKET_URL:-/socket.io}
      - VITE_APP_NAME=SupChat
      - VITE_BACKEND_URL=${VITE_BACKEND_URL:-http://api:3000}
      - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
      - VITE_FACEBOOK_APP_ID=${VITE_FACEBOOK_APP_ID}

      # Development configuration
      - NODE_ENV=development # Development mode for hot reload
      - DOCKER_ENV=true # Indicates we're running in Docker
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Mobile client (React Native)
  mobile:
    build:
      context: ./mobile
      dockerfile: Dockerfile.dev # Use development Dockerfile
    volumes:
      - ./mobile:/app
      - /app/node_modules # Preserve node_modules in container
    networks:
      - supchat-network
    env_file:
      - .env
    environment:
      # Mobile client configuration (URLs managed by update script)
      - EXPO_PUBLIC_API_URL=${EXPO_PUBLIC_API_URL}
      - EXPO_PUBLIC_DEFAULT_HOST=${EXPO_PUBLIC_DEFAULT_HOST}
      - EXPO_PUBLIC_DEFAULT_PORT=${EXPO_PUBLIC_DEFAULT_PORT}

      # Development configuration
      - NODE_ENV=development
    depends_on:
      - api
    restart: unless-stopped

  # MongoDB database service
  db:
    image: mongo:6.0
    volumes:
      - mongo-data:/data/db # persist database data
    networks:
      - supchat-network
    ports:
      - "127.0.0.1:27017:27017" # bind MongoDB to localhost only
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Container monitoring with cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: supchat-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - supchat-network
    restart: unless-stopped
    platform: linux/amd64

  # Service d'initialisation des données de test
  test-data-init:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    networks:
      - supchat-network
    environment:
      # Database configuration
      - MONGO_HOST=db
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_AUTH_SOURCE=${MONGO_AUTH_SOURCE}
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
      db:
        condition: service_healthy
    command: ["sh", "/usr/src/app/init-test-data.sh"]
    restart: "no" # Ne redémarre pas après la fin du script

# Define network for app services
networks:
  supchat-network:
    driver: bridge

# Named volume for persistent MongoDB data
volumes:
  mongo-data:
    driver: local
