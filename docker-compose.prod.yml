# Docker Compose configuration for PRODUCTION
# Usage: docker-compose -f docker-compose.prod.yml up
version: "3.8"

services:
  # Backend API service (Production)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile # Use production Dockerfile
    ports:
      - "0.0.0.0:${PORT}:${PORT}"
    networks:
      - supchat-network
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=${PORT}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_AUTH_SOURCE=${MONGO_AUTH_SOURCE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH=${JWT_REFRESH}
      - CSRF_SECRET=${CSRF_SECRET}      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_PASS=${GMAIL_PASS}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Web client (Production with Nginx)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile # Use production Dockerfile with Nginx
    ports:
      - "80:80"
    networks:
      - supchat-network
    environment:
      - NODE_ENV=production
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Mobile client (Production)
  mobile:
    build:
      context: ./mobile
      dockerfile: Dockerfile # Use production Dockerfile
    networks:
      - supchat-network
    env_file:
      - .env.production
    environment:
      - EXPO_PUBLIC_API_URL=${EXPO_PUBLIC_API_URL}
      - EXPO_PUBLIC_DEFAULT_HOST=${EXPO_PUBLIC_DEFAULT_HOST}
      - EXPO_PUBLIC_DEFAULT_PORT=${EXPO_PUBLIC_DEFAULT_PORT}
      - NODE_ENV=production
    depends_on:
      - api
    restart: unless-stopped

  # MongoDB database service
  db:
    image: mongo:6.0
    volumes:
      - mongo-data:/data/db
    networks:
      - supchat-network
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Monitoring service
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: supchat-cadvisor
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - supchat-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo-data:

networks:
  supchat-network:
    driver: bridge
