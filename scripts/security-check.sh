#!/bin/bash
# Script d'analyse de s√©curit√© Docker pour SupChat

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üõ°Ô∏è ANALYSE DE S√âCURIT√â DOCKER - SupChat${NC}"
echo "=================================================="

# Fonction pour v√©rifier la s√©curit√© des conteneurs
check_container_security() {
    echo -e "\n${YELLOW}üìä Analyse des conteneurs en cours d'ex√©cution:${NC}"
    
    for container in $(docker-compose ps -q); do
        if [ -n "$container" ]; then
            name=$(docker inspect --format='{{.Name}}' $container | sed 's/\///')
            echo -e "\n${BLUE}üîç Conteneur: ${GREEN}$name${NC}"
            
            # V√©rifier si le conteneur tourne en root
            user=$(docker inspect --format='{{.Config.User}}' $container)
            if [ -z "$user" ] || [ "$user" = "root" ] || [ "$user" = "0" ]; then
                echo -e "  ‚ö†Ô∏è  ${YELLOW}Utilisateur: ROOT (risque de s√©curit√©)${NC}"
            else
                echo -e "  ‚úÖ ${GREEN}Utilisateur: $user${NC}"
            fi
            
            # V√©rifier les privil√®ges
            privileged=$(docker inspect --format='{{.HostConfig.Privileged}}' $container)
            if [ "$privileged" = "true" ]; then
                echo -e "  ‚ùå ${RED}Mode privil√©gi√© activ√© (DANGEREUX)${NC}"
            else
                echo -e "  ‚úÖ ${GREEN}Mode privil√©gi√© d√©sactiv√©${NC}"
            fi
            
            # V√©rifier les capacit√©s
            caps=$(docker inspect --format='{{.HostConfig.CapAdd}}' $container)
            if [ "$caps" != "[]" ] && [ "$caps" != "<no value>" ]; then
                echo -e "  ‚ö†Ô∏è  ${YELLOW}Capacit√©s ajout√©es: $caps${NC}"
            else
                echo -e "  ‚úÖ ${GREEN}Aucune capacit√© suppl√©mentaire${NC}"
            fi
            
            # V√©rifier read-only
            readonly=$(docker inspect --format='{{.HostConfig.ReadonlyRootfs}}' $container)
            if [ "$readonly" = "true" ]; then
                echo -e "  ‚úÖ ${GREEN}Syst√®me de fichiers en lecture seule${NC}"
            else
                echo -e "  ‚ö†Ô∏è  ${YELLOW}Syst√®me de fichiers en √©criture${NC}"
            fi
        fi
    done
}

# Fonction pour v√©rifier les volumes
check_volumes() {
    echo -e "\n${YELLOW}üíæ Analyse des volumes:${NC}"
    
    docker volume ls --format "table {{.Name}}\t{{.Driver}}" | while read line; do
        if [[ $line == *"supchat"* ]]; then
            echo -e "  üìÅ ${GREEN}$line${NC}"
        fi
    done
}

# Fonction pour v√©rifier les r√©seaux
check_networks() {
    echo -e "\n${YELLOW}üåê Analyse des r√©seaux:${NC}"
    
    docker network ls --filter name=supchat --format "table {{.Name}}\t{{.Driver}}\t{{.Scope}}"
}

# Fonction pour v√©rifier les ports expos√©s
check_exposed_ports() {
    echo -e "\n${YELLOW}üîå Ports expos√©s:${NC}"
    
    docker-compose ps --format "table {{.Name}}\t{{.Ports}}" | while IFS=$'\t' read -r name ports; do
        if [ "$name" != "NAME" ] && [ -n "$name" ]; then
            echo -e "  üñ•Ô∏è  ${GREEN}$name${NC}: $ports"
            
            # V√©rifier si des ports sont expos√©s publiquement
            if [[ $ports == *"0.0.0.0"* ]]; then
                echo -e "    ‚ö†Ô∏è  ${YELLOW}Port expos√© publiquement${NC}"
            elif [[ $ports == *"127.0.0.1"* ]]; then
                echo -e "    ‚úÖ ${GREEN}Port limit√© √† localhost${NC}"
            fi
        fi
    done
}

# Fonction pour scanner les vuln√©rabilit√©s (optionnel)
scan_vulnerabilities() {
    echo -e "\n${YELLOW}üîç Scan de vuln√©rabilit√©s (optionnel):${NC}"
    
    if command -v trivy &> /dev/null; then
        echo -e "  üîé Scanning des images Docker..."
        
        for image in $(docker-compose config --images); do
            echo -e "\n  üì∑ Image: ${GREEN}$image${NC}"
            trivy image --severity HIGH,CRITICAL --quiet $image
        done
    else
        echo -e "  ‚ÑπÔ∏è  ${BLUE}Trivy non install√©. Pour installer:${NC}"
        echo -e "     ${GREEN}docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest${NC}"
    fi
}

# Fonction pour recommandations de s√©curit√©
security_recommendations() {
    echo -e "\n${BLUE}üìã RECOMMANDATIONS DE S√âCURIT√â:${NC}"
    echo -e "${GREEN}‚úÖ Bonnes pratiques d√©j√† appliqu√©es:${NC}"
    echo -e "   ‚Ä¢ MongoDB limit√© √† localhost"
    echo -e "   ‚Ä¢ Utilisation d'images officielles"
    echo -e "   ‚Ä¢ R√©seau Docker isol√©"
    echo -e "   ‚Ä¢ Variables d'environnement externalis√©es"
    
    echo -e "\n${YELLOW}‚ö†Ô∏è Am√©liorations recommand√©es:${NC}"
    echo -e "   ‚Ä¢ Utiliser des utilisateurs non-root dans les conteneurs"
    echo -e "   ‚Ä¢ Activer le mode read-only quand possible"
    echo -e "   ‚Ä¢ Ajouter des health checks"
    echo -e "   ‚Ä¢ Limiter les ressources (CPU/RAM)"
    echo -e "   ‚Ä¢ Scanner r√©guli√®rement les vuln√©rabilit√©s"
    echo -e "   ‚Ä¢ Utiliser des secrets Docker au lieu de variables d'env"
    
    echo -e "\n${BLUE}üöÄ Pour appliquer la version s√©curis√©e:${NC}"
    echo -e "   ${GREEN}cp docker-compose-secure.yml docker-compose.yml${NC}"
    echo -e "   ${GREEN}docker-compose down && docker-compose up -d${NC}"
}

# Ex√©cution des v√©rifications
check_container_security
check_volumes
check_networks
check_exposed_ports
scan_vulnerabilities
security_recommendations

echo -e "\n${GREEN}üéØ Analyse termin√©e !${NC}"
