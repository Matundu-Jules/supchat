#!/usr/bin/env node

// scripts/secure-update-env.js
// Version s√©curis√©e du script de mise √† jour des variables d'environnement

const os = require('os')
const fs = require('fs')
const path = require('path')
const crypto = require('crypto')

/**
 * Configuration de s√©curit√©
 */
const SECURITY_CONFIG = {
    // Environnements autoris√©s pour l'IP automatique
    ALLOWED_ENVIRONMENTS: ['development', 'dev', 'local'],

    // Plages IP priv√©es autoris√©es (RFC 1918)
    PRIVATE_IP_RANGES: [
        /^10\./, // 10.0.0.0/8
        /^172\.(1[6-9]|2[0-9]|3[0-1])\./, // 172.16.0.0/12
        /^192\.168\./, // 192.168.0.0/16
    ],

    // Interfaces r√©seau √† exclure
    EXCLUDED_INTERFACES: ['VirtualBox', 'VMware', 'Hyper-V', 'Docker'],

    // Mode debug autoris√© uniquement en d√©veloppement
    DEBUG_MODE: process.env.NODE_ENV === 'development',
}

/**
 * Valide si une IP est dans une plage priv√©e autoris√©e
 */
function isPrivateIPAllowed(ip) {
    return SECURITY_CONFIG.PRIVATE_IP_RANGES.some((range) => range.test(ip))
}

/**
 * Valide si l'interface r√©seau est autoris√©e
 */
function isInterfaceAllowed(interfaceName) {
    return !SECURITY_CONFIG.EXCLUDED_INTERFACES.some((excluded) =>
        interfaceName.toLowerCase().includes(excluded.toLowerCase())
    )
}

/**
 * D√©tection s√©curis√©e de l'IP locale
 */
function getSecureLocalIP() {
    const interfaces = os.networkInterfaces()
    const candidates = []

    for (const [name, addresses] of Object.entries(interfaces)) {
        // V√©rifier si l'interface est autoris√©e
        if (!isInterfaceAllowed(name)) {
            if (SECURITY_CONFIG.DEBUG_MODE) {
                console.log(`‚ö†Ô∏è  Interface exclue: ${name}`)
            }
            continue
        }

        for (const address of addresses) {
            // IPv4, non-interne, et dans une plage priv√©e autoris√©e
            if (
                address.family === 'IPv4' &&
                !address.internal &&
                address.address &&
                isPrivateIPAllowed(address.address)
            ) {
                candidates.push({
                    ip: address.address,
                    interface: name,
                    netmask: address.netmask,
                })
            }
        }
    }

    if (candidates.length === 0) {
        if (SECURITY_CONFIG.DEBUG_MODE) {
            console.warn(
                '‚ö†Ô∏è  Aucune IP priv√©e valide trouv√©e, utilisation de localhost'
            )
        }
        return null
    }

    // Prioriser l'interface WiFi/Ethernet principale
    const prioritized = candidates.sort((a, b) => {
        const aScore =
            a.interface.toLowerCase().includes('wi-fi') ||
            a.interface.toLowerCase().includes('ethernet')
                ? 10
                : 0
        const bScore =
            b.interface.toLowerCase().includes('wi-fi') ||
            b.interface.toLowerCase().includes('ethernet')
                ? 10
                : 0
        return bScore - aScore
    })

    const selected = prioritized[0]

    if (SECURITY_CONFIG.DEBUG_MODE) {
        console.log(
            `‚úÖ IP s√©lectionn√©e: ${selected.ip} (${selected.interface})`
        )
    }

    return selected.ip
}

/**
 * G√©n√®re un hash pour masquer l'IP en logs publics
 */
function generateIPHash(ip) {
    return crypto
        .createHash('sha256')
        .update(ip + 'supchat-salt')
        .digest('hex')
        .substring(0, 8)
}

/**
 * Met √† jour s√©curis√©e d'un fichier .env
 */
function secureUpdateEnvFile(filePath, envVars, isClientSide = false) {
    let content = ''

    // Lire le fichier existant s'il existe
    if (fs.existsSync(filePath)) {
        content = fs.readFileSync(filePath, 'utf8')
    }

    // V√©rifier l'environnement pour les variables client
    if (
        isClientSide &&
        !SECURITY_CONFIG.ALLOWED_ENVIRONMENTS.includes(
            process.env.NODE_ENV || 'development'
        )
    ) {
        console.warn(
            `‚ö†Ô∏è  IP automatique d√©sactiv√©e en environnement: ${process.env.NODE_ENV}`
        )
        return
    }

    // Mettre √† jour chaque variable avec validation
    Object.entries(envVars).forEach(([key, value]) => {
        // Valider que les variables client contiennent bien une IP priv√©e
        if (
            isClientSide &&
            value.includes('http://') &&
            !value.includes('localhost')
        ) {
            const urlMatch = value.match(/http:\/\/([^:\/]+)/)
            if (urlMatch && !isPrivateIPAllowed(urlMatch[1])) {
                console.error(`‚ùå IP publique d√©tect√©e pour ${key}: ${value}`)
                return
            }
        }

        const regex = new RegExp(`^${key}=.*$`, 'm')
        const line = `${key}=${value}`

        if (regex.test(content)) {
            content = content.replace(regex, line)
        } else {
            content += content.endsWith('\n') || content === '' ? '' : '\n'
            content += `${line}\n`
        }
    })

    // Cr√©er le dossier si n√©cessaire
    const dir = path.dirname(filePath)
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true })
    }

    // √âcrire le fichier avec permissions restreintes
    fs.writeFileSync(filePath, content, { mode: 0o600 })

    const relativePath = path.relative(process.cwd(), filePath)
    console.log(`‚úÖ Mis √† jour (s√©curis√©): ${relativePath}`)
}

/**
 * G√©n√®re les .env de mani√®re s√©curis√©e
 */
function secureGenerateEnvFiles() {
    console.log('\nüîí Mise √† jour S√âCURIS√âE des fichiers .env SupChat')
    console.log('==================================================')

    // V√©rifier l'environnement
    const currentEnv = process.env.NODE_ENV || 'development'
    if (!SECURITY_CONFIG.ALLOWED_ENVIRONMENTS.includes(currentEnv)) {
        console.error('‚ùå G√©n√©ration IP automatique d√©sactiv√©e en production !')
        console.log(
            "üí° Configurez manuellement les variables d'environnement en production"
        )
        return
    }

    const localIP = getSecureLocalIP()
    if (!localIP) {
        console.error('‚ùå Impossible de d√©tecter une IP priv√©e s√©curis√©e')
        console.log('üí° Utilisation de localhost par d√©faut')
        return
    }

    const serverPort = process.env.PORT || 3000
    const ipHash = generateIPHash(localIP)

    console.log(`üîê IP locale s√©curis√©e: ${localIP} (hash: ${ipHash})`)
    console.log(`üîå Port serveur: ${serverPort}`)
    console.log(`üåç Environnement: ${currentEnv}\n`)

    const projectRoot = path.resolve(__dirname, '..')

    // 1. client-web (.env) - ATTENTION: variables expos√©es c√¥t√© client
    const webEnvPath = path.join(projectRoot, 'client-web', '.env')
    secureUpdateEnvFile(
        webEnvPath,
        {
            VITE_BACKEND_URL: `http://${localIP}:${serverPort}`,
            VITE_API_URL: `http://${localIP}:${serverPort}/api`,
            VITE_SOCKET_URL: `http://${localIP}:${serverPort}`,
            VITE_HOST_IP: localIP,
            VITE_ENV: currentEnv,
            VITE_IP_HASH: ipHash, // Pour validation sans exposer l'IP compl√®te
        },
        true
    )

    // 2. client-mobile (.env) - ATTENTION: variables expos√©es c√¥t√© client
    const mobileEnvPath = path.join(projectRoot, 'client-mobile', '.env')
    secureUpdateEnvFile(
        mobileEnvPath,
        {
            EXPO_PUBLIC_HOST: localIP,
            EXPO_PUBLIC_API_URL: `http://${localIP}:${serverPort}/api`,
            EXPO_PUBLIC_SOCKET_URL: `http://${localIP}:${serverPort}`,
            EXPO_PUBLIC_BACKEND_URL: `http://${localIP}:${serverPort}`,
            EXPO_PUBLIC_ENV: currentEnv,
            EXPO_PUBLIC_IP_HASH: ipHash,
        },
        true
    )

    // 3. supchat-server (.env) - Variables serveur s√©curis√©es
    const serverEnvPath = path.join(projectRoot, 'supchat-server', '.env')
    const serverEnvVars = {}

    // Pr√©server les secrets existants
    if (fs.existsSync(serverEnvPath)) {
        const existingContent = fs.readFileSync(serverEnvPath, 'utf8')
        if (!existingContent.includes('HOST_IP=')) {
            serverEnvVars['HOST_IP'] = localIP
            serverEnvVars['HOST_IP_HASH'] = ipHash
        }
    } else {
        serverEnvVars['HOST_IP'] = localIP
        serverEnvVars['HOST_IP_HASH'] = ipHash
        serverEnvVars['PORT'] = serverPort
        serverEnvVars['NODE_ENV'] = currentEnv
    }

    if (Object.keys(serverEnvVars).length > 0) {
        secureUpdateEnvFile(serverEnvPath, serverEnvVars, false)
    }

    console.log('\nüîí Variables g√©n√©r√©es de mani√®re s√©curis√©e:')
    console.log(`   ‚úÖ client-web: Configuration IP priv√©e (${ipHash})`)
    console.log(`   ‚úÖ client-mobile: Configuration IP priv√©e (${ipHash})`)
    console.log(`   ‚úÖ server: Configuration r√©seau s√©curis√©e`)

    console.log('\n‚ö†Ô∏è  AVERTISSEMENTS DE S√âCURIT√â:')
    console.log(
        '   ‚Ä¢ Les variables VITE_* et EXPO_PUBLIC_* sont EXPOS√âES c√¥t√© client'
    )
    console.log("   ‚Ä¢ N'utilisez JAMAIS de secrets dans ces variables")
    console.log(
        '   ‚Ä¢ Cette configuration est UNIQUEMENT pour le d√©veloppement local'
    )
    console.log('   ‚Ä¢ En production, configurez manuellement avec HTTPS')

    console.log('\nüõ°Ô∏è  Recommandations:')
    console.log('   ‚Ä¢ Utilisez HTTPS en production')
    console.log('   ‚Ä¢ Configurez un reverse proxy (nginx)')
    console.log(
        "   ‚Ä¢ Utilisez des variables d'environnement c√¥t√© serveur pour les secrets"
    )
    console.log("   ‚Ä¢ Activez le firewall pour restreindre l'acc√®s")

    console.log('==================================================\n')
}

// V√©rification des permissions au d√©marrage
if (require.main === module) {
    // V√©rifier si on est en mode d√©veloppement
    if (process.env.NODE_ENV === 'production') {
        console.error('‚ùå Ce script ne doit PAS √™tre utilis√© en production !')
        process.exit(1)
    }

    secureGenerateEnvFiles()
}

module.exports = {
    getSecureLocalIP,
    secureGenerateEnvFiles,
    generateIPHash,
    SECURITY_CONFIG,
}
