#!/bin/bash
# Script de d√©marrage rapide pour le projet SupChat
# Usage: ./sp.sh [option]

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'aide
show_help() {
    echo -e "${BLUE}SupChat - Script de d√©marrage rapide${NC}"
    echo ""
    echo "Usage: ./sp.sh [option]"
    echo ""
    echo "Options disponibles:"
    echo -e "  ${GREEN}full${NC}      D√©marre tout le projet avec Docker Compose (par d√©faut)"
    echo -e "  ${GREEN}db${NC}        D√©marre seulement la base de donn√©es MongoDB"
    echo -e "  ${GREEN}backend${NC}   D√©marre le serveur backend en mode dev"
    echo -e "  ${GREEN}web${NC}       D√©marre le client web en mode dev"
    echo -e "  ${GREEN}mobile${NC}    D√©marre le client mobile en mode dev"
    echo -e "  ${GREEN}stop${NC}      Arr√™te tous les services Docker"
    echo -e "  ${GREEN}clean${NC}     Arr√™te et nettoie tous les conteneurs/volumes Docker"
    echo -e "  ${GREEN}logs${NC}      Affiche les logs de tous les services"
    echo -e "  ${GREEN}status${NC}    Affiche le statut des services"
    echo -e "  ${GREEN}urls${NC}      Affiche toutes les URLs des services"
    echo -e "  ${GREEN}security${NC}  Lance une analyse de s√©curit√© Docker"
    echo -e "  ${GREEN}help${NC}      Affiche cette aide"
    echo ""
    echo "Exemples:"
    echo "  ./sp.sh           # D√©marre tout le projet"
    echo "  ./sp.sh web       # D√©marre seulement le client web"
    echo "  ./sp.sh stop      # Arr√™te tous les services"
}

# Fonction pour v√©rifier si Docker est en cours d'ex√©cution
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop.${NC}"
        exit 1
    fi
}

# Fonction pour d√©marrer tout le projet
start_full() {
    echo -e "${BLUE}üöÄ D√©marrage complet du projet SupChat...${NC}"
    check_docker
    
    echo -e "${YELLOW}üì¶ Construction et d√©marrage de tous les services...${NC}"
    docker-compose up -d
    
    echo ""
    echo -e "${GREEN}‚úÖ Projet d√©marr√© avec succ√®s !${NC}"
    echo ""
    echo -e "${BLUE}üåê Services disponibles:${NC}"
    echo -e "  ‚Ä¢ Application web: ${GREEN}http://localhost${NC}"
    echo -e "  ‚Ä¢ API Backend: ${GREEN}http://localhost:3000${NC}"
    echo -e "  ‚Ä¢ Base de donn√©es: ${GREEN}mongodb://localhost:27017${NC}"
    echo -e "  ‚Ä¢ Monitoring: ${GREEN}http://localhost:8080${NC}"
    echo ""
    echo -e "${YELLOW}üí° Utilisez './sp.sh logs' pour voir les logs en temps r√©el${NC}"
}

# Fonction pour d√©marrer seulement la DB
start_db() {
    echo -e "${BLUE}üóÑÔ∏è  D√©marrage de la base de donn√©es MongoDB...${NC}"
    check_docker
    docker-compose up -d db
    echo -e "${GREEN}‚úÖ Base de donn√©es d√©marr√©e !${NC}"
    echo -e "  ‚Ä¢ MongoDB: ${GREEN}mongodb://localhost:27017${NC}"
}

# Fonction pour d√©marrer le backend en mode dev
start_backend() {
    echo -e "${BLUE}‚öôÔ∏è  D√©marrage du backend en mode d√©veloppement...${NC}"
    
    # V√©rifier si la DB est en cours d'ex√©cution
    if ! docker-compose ps db | grep -q "Up"; then
        echo -e "${YELLOW}üì¶ D√©marrage de la base de donn√©es...${NC}"
        docker-compose up -d db
        echo -e "${YELLOW}‚è≥ Attente du d√©marrage de MongoDB...${NC}"
        sleep 5
    fi
    
    echo -e "${YELLOW}üîß D√©marrage du serveur backend...${NC}"
    cd supchat-server && npm start
}

# Fonction pour d√©marrer le client web en mode dev
start_web() {
    echo -e "${BLUE}üåê D√©marrage du client web en mode d√©veloppement...${NC}"
    cd client-web && npm run dev
}

# Fonction pour d√©marrer le client mobile en mode dev
start_mobile() {
    echo -e "${BLUE}üì± D√©marrage du client mobile en mode d√©veloppement...${NC}"
    cd client-mobile && npm start
}

# Fonction pour arr√™ter tous les services
stop_services() {
    echo -e "${YELLOW}üõë Arr√™t de tous les services...${NC}"
    check_docker
    docker-compose stop
    echo -e "${GREEN}‚úÖ Tous les services ont √©t√© arr√™t√©s${NC}"
}

# Fonction pour nettoyer compl√®tement
clean_all() {
    echo -e "${YELLOW}üßπ Nettoyage complet des conteneurs et volumes...${NC}"
    check_docker
    docker-compose down -v --remove-orphans
    docker system prune -f
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

# Fonction pour afficher les logs
show_logs() {
    echo -e "${BLUE}üìã Affichage des logs en temps r√©el...${NC}"
    echo -e "${YELLOW}Appuyez sur Ctrl+C pour arr√™ter l'affichage${NC}"
    check_docker
    docker-compose logs -f
}

# Fonction pour afficher le statut
show_status() {
    echo -e "${BLUE}üìä Statut des services:${NC}"
    check_docker
    docker-compose ps
    echo ""
    echo -e "${BLUE}üíæ Utilisation des ressources:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
}

# Fonction pour afficher toutes les URLs des services
show_urls() {
    echo -e "${BLUE}üåê URLs des services SupChat:${NC}"
    echo ""
    
    # V√©rifier si Docker est en cours d'ex√©cution
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n'est pas en cours d'ex√©cution${NC}"
        return 1
    fi
    
    # Obtenir l'IP locale (compatible Windows/Linux)
    if command -v ipconfig > /dev/null 2>&1; then
        # Windows
        LOCAL_IP=$(ipconfig | grep "IPv4" | head -1 | awk '{print $NF}' | tr -d '\r')
    elif command -v hostname > /dev/null 2>&1; then
        # Linux/Mac
        LOCAL_IP=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "localhost")
    else
        LOCAL_IP="localhost"
    fi
    
    # Fallback si pas d'IP trouv√©e
    if [ -z "$LOCAL_IP" ] || [ "$LOCAL_IP" = "" ]; then
        LOCAL_IP="localhost"
    fi
    
    # V√©rifier quels services sont en cours d'ex√©cution
    echo -e "${YELLOW}üì± Services publics (accessibles depuis n'importe quel appareil):${NC}"
    
    # Client Web (port 80, accessible publiquement)
    if docker-compose ps web | grep -q "Up"; then
        echo -e "  üåê ${GREEN}Application Web${NC}:"
        echo -e "    ‚Ä¢ http://localhost"
        echo -e "    ‚Ä¢ http://$LOCAL_IP"
        echo -e "    ‚Ä¢ http://127.0.0.1"
    else
        echo -e "  üåê ${RED}Application Web: ‚ùå Non d√©marr√©e${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}ÔøΩ Services mixtes:${NC}"
    
    # API Backend (port 3000, maintenant accessible publiquement pour mobile)
    if docker-compose ps api | grep -q "Up"; then
        echo -e "  ‚öôÔ∏è  ${GREEN}API Backend${NC}:"
        echo -e "    ‚Ä¢ http://localhost:3000"
        echo -e "    ‚Ä¢ http://127.0.0.1:3000"
        echo -e "    ‚Ä¢ http://$LOCAL_IP:3000 (pour mobile)"
        echo -e "    ‚Ä¢ Documentation: http://localhost:3000/docs"
    else
        echo -e "  ‚öôÔ∏è  ${RED}API Backend: ‚ùå Non d√©marr√©e${NC}"
    fi
    
    # Base de donn√©es MongoDB (port 27017, localhost seulement)
    if docker-compose ps db | grep -q "Up"; then
        echo -e "  üóÑÔ∏è  ${GREEN}MongoDB${NC}:"
        echo -e "    ‚Ä¢ mongodb://localhost:27017"
        echo -e "    ‚Ä¢ mongodb://127.0.0.1:27017"
        echo -e "    ‚Ä¢ DB: supchat"
    else
        echo -e "  üóÑÔ∏è  ${RED}MongoDB: ‚ùå Non d√©marr√©e${NC}"
    fi
    
    # Monitoring cAdvisor (port 8080, localhost seulement)
    if docker-compose ps cadvisor | grep -q "Up"; then
        echo -e "  üìä ${GREEN}Monitoring (cAdvisor)${NC}:"
        echo -e "    ‚Ä¢ http://localhost:8080"
        echo -e "    ‚Ä¢ http://127.0.0.1:8080"
    else
        echo -e "  üìä ${RED}Monitoring: ‚ùå Non d√©marr√©${NC}"
    fi
    
    # Client Mobile (port interne 8081, pas expos√©)
    if docker-compose ps mobile | grep -q "Up"; then
        echo -e "  üì± ${GREEN}Client Mobile${NC}:"
        echo -e "    ‚Ä¢ Conteneur en cours d'ex√©cution (port interne 8081)"
        echo -e "    ‚Ä¢ Utilisez Expo Go pour vous connecter"
    else
        echo -e "  üì± ${RED}Client Mobile: ‚ùå Non d√©marr√©${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üí° Conseils:${NC}"
    echo -e "  ‚Ä¢ Pour acc√©der depuis un t√©l√©phone/tablette, utilisez: ${GREEN}http://$LOCAL_IP${NC}"
    echo -e "  ‚Ä¢ L'API est accessible sur port 3000 depuis l'ext√©rieur pour les apps mobiles"
    echo -e "  ‚Ä¢ MongoDB reste s√©curis√© sur localhost uniquement"
    echo -e "  ‚Ä¢ Utilisez ${GREEN}'./sp.sh logs'${NC} pour voir les logs en temps r√©el"
    echo -e "  ‚Ä¢ Utilisez ${GREEN}'./sp.sh status'${NC} pour voir l'√©tat d√©taill√©"
}

# Script principal
case "${1:-full}" in
    "full"|"")
        start_full
        ;;
    "db")
        start_db
        ;;
    "backend"|"api")
        start_backend
        ;;
    "web"|"frontend")
        start_web
        ;;
    "mobile")
        start_mobile
        ;;
    "stop")
        stop_services
        ;;
    "clean")
        clean_all
        ;;
    "logs")
        show_logs
        ;;
    "status")
        show_status
        ;;
    "urls")
        show_urls
        ;;
    "security")
        ./security-check.sh
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Option inconnue: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac