{"type":"entity","name":"SUPCHAT_PROJECT","entityType":"project_context","observations":["Projet SUPCHAT, plateforme collaborative, architecture Docker, frontend React 18 + TypeScript + Redux Toolkit + Vite 5, backend Node.js 22 LTS + Express + MongoDB 8.0, mobile non développé, gestion Docker Compose, tests Vitest/MSW/Jest, conventions strictes."],"relations":[{"relationType":"has_stack","to":"SUPCHAT_STACK_TECHNIQUE"},{"relationType":"has_docker_config","to":"SUPCHAT_CONFIGURATION_DOCKER"},{"relationType":"has_state_management","to":"SUPCHAT_REDUX_TOOLKIT_ARCHITECTURE"},{"relationType":"has_test_infra","to":"SUPCHAT_TESTS_HELPERS_CONFIGURATION"},{"relationType":"has_milestone","to":"SUPCHAT_TESTS_FRONTEND_VALIDATION"},{"relationType":"has_convention","to":"SUPCHAT_CODE_CONVENTIONS"},{"relationType":"has_documentation","to":"SUPCHAT_DOCUMENTATION_STRUCTURE"},{"relationType":"has_permissions","to":"SUPCHAT_PERMISSIONS_SYSTEM"},{"relationType":"has_quality_standards","to":"SUPCHAT_QUALITY_REQUIREMENTS"},{"relationType":"has_success_criteria","to":"SUPCHAT_SUCCESS_TARGETS"},{"relationType":"has_roadmap","to":"SUPCHAT_CHANNELS_WEB_ROADMAP"},{"relationType":"has_feature","to":"SUPCHAT_FEATURES_CORE"},{"relationType":"has_feature","to":"SUPCHAT_FEATURES_ADVANCED"},{"relationType":"has_status","to":"SUPCHAT_CURRENT_IMPLEMENTATION"},{"relationType":"has_gap","to":"SUPCHAT_MISSING_FEATURES"}]}
{"type":"entity","name":"SUPCHAT_STACK_TECHNIQUE","entityType":"tech_stack","observations":["Frontend : React 18 + TypeScript 5.x + Redux Toolkit v2.5.1 + Vite 5.4.19","Tests : Vitest v1.6.1 + React Testing Library + MSW v2.1.0","Backend : Node.js 22 LTS + Express + MongoDB 8.0 + Socket.io","Validation : Yup v1.6.1 côté client, Joi/Zod côté serveur","Routing : React Router v7.2.0","Styling : SCSS avec CSS Modules, fichiers _variables.scss, _themes.scss obligatoires","Infrastructure : Docker + Docker Compose v2, scripts Bash modulaires"]}
{"type":"entity","name":"SUPCHAT_CONFIGURATION_DOCKER","entityType":"docker_config","observations":["Fichiers .env.* multiples à la racine selon l'environnement (development, test, production)","Interdiction totale de fichiers .env dans web/, api/, mobile/","Docker Compose v2 avec environnements distincts : development et test actifs","Commandes obligatoires : docker compose -f docker-compose.*.yml --env-file .env.*","Script docker-manager.sh pour gestion automatisée des environnements","Tests uniquement via Docker avec environnement isolé MongoDB port 27018","Hot-reload Vite 5 HMR en développement, nodemon pour API"]}
{"type":"entity","name":"SUPCHAT_REDUX_TOOLKIT_ARCHITECTURE","entityType":"state_management","observations":["Store configuré avec slices modulaires : auth, workspaces, channels, messages, notifications, preferences, reactions","Hooks typés : useAppDispatch, useAppSelector avec types RootState et AppDispatch","Architecture centralisée Redux Toolkit au lieu de Context API","Slices avec createSlice et PayloadAction pour type safety","Configuration store avec configureStore de @reduxjs/toolkit","Gestion d'état globale moderne avec Redux DevTools intégré","Pattern de store modulaire par domaine fonctionnel"]}
{"type":"entity","name":"SUPCHAT_TESTS_HELPERS_CONFIGURATION","entityType":"test_infrastructure","observations":["test-utils.tsx avec MockSocketProvider simulant le contexte Socket complet","Mock global du hook useSocket pour tous les tests avec vi.mock","renderWithProviders wrappant Provider Redux + MockSocketProvider + BrowserRouter","TestProvider helper principal validé pour tous les tests React","Configuration Vitest avec alias @contexts obligatoire","Pattern de mock : socket avec id, connected, on, off, emit functions","Tests de hooks mockant directement useSocket pour éviter erreurs de provider"]}
{"type":"entity","name":"SUPCHAT_TESTS_FRONTEND_VALIDATION","entityType":"project_milestone","observations":["Tous les 112 tests frontend passent avec succès dans l'environnement Docker de test","Configuration finale validée avec docker compose -f docker-compose.test.yml --env-file .env.test","Helpers de test validés : renderWithProviders, TestProvider, MockSocketProvider","Mock du hook useSocket configuré globalement pour éviter les erreurs de provider","Alias @contexts ajouté et requis dans la configuration Vitest","Pattern de tests validé avec Vitest + MSW + Redux Toolkit","Architecture de tests Docker-first entièrement opérationnelle"]}
{"type":"entity","name":"SUPCHAT_CODE_CONVENTIONS","entityType":"convention","observations":["Tous les types TypeScript métiers (User, Channel, Message, etc.) doivent être définis dans le dossier web/src/types/ dans un fichier dédié, et importés dans les composants/hooks. Ne jamais redéfinir un type métier dans un composant ou un hook, sauf pour des types purement locaux/éphémères.","Ne jamais utiliser 'any' dans les hooks, composants ou helpers TypeScript du projet SUPCHAT. Toujours typer les objets métiers (User, Channel, Message, ChannelMember, etc.) via les interfaces du dossier web/src/types/. Les tableaux d'utilisateurs, messages, channels, etc. doivent être typés explicitement (ex: Message[], ChannelMember[]). Les paramètres d'erreur doivent être castés avec (err as Error) si besoin. Les objets author, user, etc. doivent être typés User ou partiels correspondants. Les types métiers ne doivent jamais être redéfinis localement.","Interdiction stricte d'utiliser 'any' dans tout le code TypeScript du projet SUPCHAT (frontend et backend).","Utiliser 'unknown' pour les erreurs dans les thunks, puis caster avec 'err instanceof Error'.","Tous les services, slices Redux, hooks, helpers, etc. doivent être typés strictement, sans aucun usage de 'any'.","Tout nouveau code ou refactor doit respecter cette règle et lever une erreur si 'any' est utilisé."]}
{"type":"entity","name":"SUPCHAT_DOCUMENTATION_STRUCTURE","entityType":"documentation","observations":["Documentation principale centralisée dans .github/copilot-instructions.md","Suppression doublon copilot-instructions.md à la racine","Structure organisée : règles critiques, architecture, stack technique, conventions","Résumé exécutif avec validation 112/112 tests frontend","Conventions Docker obligatoires avec interdictions absolues","Patterns de test validés avec exemples concrets","Configuration finale validée après résolution complète des tests","Règle CONSULTATION MÉMOIRE AUTOMATIQUE ajoutée comme priorité absolue dans les instructions","GitHub Copilot doit OBLIGATOIREMENT consulter mcp_memory_read_graph ou mcp_memory_search_nodes au début de chaque nouvelle conversation","Consultation mémoire requise AVANT toute action ou réponse pour récupérer contexte complet","Pattern de consultation : récupérer contexte projet, conventions validées, historique corrections, stack technique","Règle ajoutée en position #1 dans les règles obligatoires ET en position #0 dans les conseils Copilot","Documentation mise à jour pour garantir continuité du contexte entre conversations"]}
{"type":"entity","entityType":"Convention","name":"SUPCHAT Copilot Instructions 2025","observations":["❌ INTERDICTION de masquer les erreurs ESLint/TypeScript avec des commentaires `eslint-disable` ou similaires. Toute erreur doit être corrigée proprement par refactorisation du code, jamais contournée."]}
{"type":"entity","name":"SUPCHAT_BUG_INVITATIONS_TESTS_UI","entityType":"bugfix","observations":["Les tests automatisés d’invitations sur ChannelsPage (Vitest + MSW) échouent toujours : la section 'Invitations' et les boutons 'Accepter'/'Refuser' ne s’affichent pas dans le DOM, malgré : mocks MSW corrects, utilisateur connecté avec _id/id/email cohérents, slice Redux branché, et logique de rôle adaptée pour 'invité'. Le DOM ne contient que l’état vide 'Aucun canal disponible'. Les corrections types (ajout recipient, ChannelRole 'invité', logique getCurrentUserRole) n’ont pas suffi. Problème à diagnostiquer et corriger dans une future session."]}
{"type":"entity","name":"SUPCHAT_API_ENDPOINTS","entityType":"documentation","observations":["Cartographie exhaustive de tous les endpoints REST de l’API SUPCHAT (Express) : Auth, Workspaces, Channels, Messages, Utilisateur, Permissions, Notifications, Préférences, Recherche, Intégrations, Bots, Réactions, Health. Tous les endpoints sont sécurisés par authMiddleware sauf exceptions publiques. Organisation stricte par domaine métier. Uploads sécurisés via Multer. Permissions et intégrations gérées par endpoints dédiés. Le détail complet (liste exhaustive et conventions) est documenté dans le fichier : docs/documentation_api/endpoints-supchat.md (chemin absolu : C:/dev/supchat/docs/documentation_api/endpoints-supchat.md)."],"relations":[{"relationType":"documents","to":"SUPCHAT_PROJECT"}]}