{"type":"entity","name":"SUPCHAT Project Architecture","entityType":"project_context","observations":["Architecture Docker avec 2 environnements actifs: development et test (prod/secure supprimés temporairement)","Frontend React 18 + TypeScript + Redux Toolkit + Vite 5 (port 80)","Backend Node.js 22 LTS + Express + MongoDB 8.0 (port 3000)","Mobile React Native 0.74 + Expo SDK 51 (non développé pour le moment)","Tests via Vitest + MSW + docker-compose.test.yml","Gestion uniquement via Docker Compose et docker-manager.sh"]}
{"type":"entity","name":"SUPCHAT Docker Environment","entityType":"docker_config","observations":["docker-compose.development.yml: API port 3000, Web port 80, MongoDB 27017","docker-compose.test.yml: API port 3001, MongoDB 27018, réseau isolé","Variables d'environnement gérées uniquement par Docker Compose","Hot-reload via volumes montés en développement","Scripts automatisés via docker-manager.sh modulaire","Focus sur 2 environnements: development (port 3000) et test (port 3001)","Tests OBLIGATOIRES via docker-compose.test.yml up --build","MongoDB test isolé sur port 27018 vs dev sur 27017","Environnements prod/secure supprimés temporairement","docker-manager.sh comme interface principale de gestion"]}
{"type":"entity","name":"SUPCHAT User Requirements","entityType":"user_preferences","observations":["Tests uniquement via environnement Docker existant (web/src/tests, api/tests)","Aucun lancement manuel npm/node autorisé - tout via Docker","Focus sur web/ et api/ - mobile/ non développé","Utilisation obligatoire des fichiers SCSS existants (_variables.scss, _themes.scss, etc.)","Demander confirmation utilisateur avant tests ou utiliser environnement test Docker","Comportement pour tests: toujours demander confirmation utilisateur avant lancement automatique","Si problème de tests: proposer logs Docker plutôt que scripts manuels","Utiliser EXCLUSIVEMENT docker-compose.test.yml pour tests","Ne jamais créer de scripts test manuels en dehors environnement Docker","Mobile/ à ignorer complètement - non développé pour le moment"]}
{"type":"entity","name":"SUPCHAT Redux Architecture","entityType":"frontend_state","observations":["Redux Toolkit configuré avec store modulaire (authSlice, workspacesSlice, etc.)","Hooks typés useAppDispatch et useAppSelector","Alias configurés: @store, @components, @hooks, @services, @utils, @styles","Tests Vitest + MSW dans web/src/tests/","Architecture modulaire par domaine fonctionnel","Hooks Redux typés obligatoires: useAppDispatch(), useAppSelector()","Store configuré dans src/store/store.ts avec tous les slices","Structure slices: authSlice, workspacesSlice, channelsSlice, messagesSlice, etc.","Import patterns: import { useAppDispatch } from '@hooks/redux'","Utiliser createSlice avec immer pour mutations état"]}
{"type":"entity","entityType":"project_context","name":"SUPCHAT Project Specifications","observations":["Projet pour l'entreprise 'La Confiance Règne' - améliorer communication interne","Plateforme de collaboration équipe avec workspaces et channels dédiés","Développement web + mobile obligatoire avec identité visuelle","Accent sur simplicité, sécurité, permissions flexibles","Architecture client-serveur avec logique métier côté serveur uniquement"]}
{"type":"entity","entityType":"feature_requirements","name":"SUPCHAT Core Features","observations":["Authentification: compte classique + OAuth2 (Google, Facebook)","Workspaces: création, invitation email/lien, public/privé, dashboard gestion","Channels: publics (tous membres) + privés (invités), menu avec recherche","Messagerie temps réel: texte, réactions emojis, partage fichiers, mentions @user, hashtags #channel","Gestion permissions: rôles admin/membre/invité, permissions post/modération/gestion"]}
{"type":"entity","entityType":"feature_requirements","name":"SUPCHAT Advanced Features","observations":["Notifications temps réel: mentions utilisateur, nouveaux messages, paramètres par channel","Intégrations: Google Drive, Microsoft Teams, GitHub","Bots: rappels, sondages, automatisation API tierces","Recherche unifiée: messages avec contexte, fichiers partagés, channels, utilisateurs","Paramètres utilisateur: OAuth2, thème dark/light, statut personnalisé, export données GDPR"]}
{"type":"entity","entityType":"technical_requirements","name":"SUPCHAT Architecture Requirements","observations":["Serveur REST ou GraphQL implémentant toutes fonctionnalités","2 clients (web + mobile) interagissant uniquement avec serveur","Base de données au choix libre","Docker Compose obligatoire avec minimum 3 services: backend, frontend web, database","Logique métier exclusivement côté serveur, clients = interfaces uniquement"]}
{"type":"entity","entityType":"project_deliverables","name":"SUPCHAT Deliverables","observations":["Archive .zip: code source, assets média, documentation technique, manuel utilisateur","Documentation développeur: setup environnement, déploiement, justification technos, UML, schéma DB","Manuel utilisateur: utilisation app, aperçu fonctionnalités principales","INTERDIT: secrets (API keys, passwords) dans le code - échec critique si présent","Autorisé: secrets mockés dans documentation marquée 'For evaluation only'"]}
{"type":"entity","entityType":"grading_criteria","name":"SUPCHAT Grading System","observations":["Total 500 points + 50 bonus possibles","Documentation 50pts (30 technique + 20 manuel) - <30 = ÉCHEC","UI/UX Quality 20pts (10+10)","Deployment 50pts (30 architecture + 20 docker) - <30 = ÉCHEC","Features 190pts (30 auth + 160 générales) - <100 = ÉCHEC","Code Quality 190pts par fonctionnalité - <100 = ÉCHEC"]}
{"type":"entity","entityType":"grading_criteria","name":"SUPCHAT Feature Points Breakdown","observations":["Auth 30pts: login standard 10pts + OAuth2 20pts","Features générales 160pts: Workspaces&Channels 40pts, Messaging 40pts, Notifications 20pts, Permissions 20pts, Integrations&Search 40pts","Code Quality: structure données, pas duplication, lisibilité nommage/logique, maintenabilité/abstraction","Bonus: UI/UX professionnel, architecture robuste, déploiement en ligne, fonctionnalités extra (vidéo, partage écran)","Pénalités: secrets hardcodés = code quality 0, mots de passe plain text = échec projet"]}
{"type":"entity","entityType":"implementation_status","name":"SUPCHAT Current Implementation","observations":["Architecture Docker respecte exigences: backend (Node.js), frontend web (React), database (MongoDB)","Authentification implémentée: login classique + OAuth2 Google/Facebook","Workspaces et channels: structure de base présente avec permissions","Messagerie temps réel: Socket.io configuré, WebSocket fonctionnel","Tests automatisés: Vitest (web) + Jest (api) dans environnements Docker isolés"]}
{"type":"entity","entityType":"implementation_gaps","name":"SUPCHAT Missing Features","observations":["Mobile: React Native présent mais non développé (focus web/api actuel)","Intégrations: Google Drive, Microsoft Teams, GitHub pas encore implémentées","Bots: système de rappels, sondages, automatisation à développer","Recherche unifiée: recherche messages avec contexte à améliorer","Export GDPR: fonctionnalité export données personnelles à implémenter"]}
{"type":"entity","entityType":"quality_standards","name":"SUPCHAT Quality Requirements","observations":["Code Quality obligatoire: structure données appropriée, pas de duplication","Lisibilité: nommage clair, logique compréhensible","Maintenabilité: abstraction correcte, modularité","Sécurité: aucun secret hardcodé, mots de passe hashés","Architecture: logique métier côté serveur, clients comme interfaces"]}
{"type":"entity","entityType":"success_criteria","name":"SUPCHAT Success Targets","observations":["Documentation technique complète: setup, déploiement, UML, schéma DB","Manuel utilisateur: guide utilisation, aperçu fonctionnalités","UI/UX professionnel pour points bonus","Déploiement en ligne pour bonus","Fonctionnalités extra possibles: vidéo calls, screen sharing"]}
{"type":"entity","entityType":"permissions_system","name":"SUPCHAT Roles & Permissions","observations":["3 rôles principaux: Admin, Membre, Invité","Admin: créateur espace par défaut, tous droits + délégation","Membre: accès standard configurable par admin","Invité: accès limité, souvent lecture seule ou interaction restreinte","Permissions ultra-flexibles ajustables par besoin"]}
{"type":"entity","entityType":"permissions_matrix","name":"SUPCHAT Admin Permissions","observations":["Créer workspace: ✅","Inviter membres: ✅","Supprimer workspace: ✅","Créer canal: ✅","Gérer membres: ✅ (ajouter/retirer)","Modifier rôles: ✅ (changer admin/membre/invité)","Configurer permissions: ✅","Poster messages: ✅","Modérer messages: ✅","Partager fichiers: ✅","Rechercher: ✅","Gérer notifications: ✅","Gérer intégrations/bots: ✅"]}
{"type":"entity","entityType":"permissions_matrix","name":"SUPCHAT Membre Permissions","observations":["Créer workspace: ❌","Inviter membres: Option (si autorisé par admin)","Supprimer workspace: ❌","Créer canal: ✅ (selon config admin)","Gérer membres: ❌","Modifier rôles: ❌","Configurer permissions: Option (délégation possible)","Poster messages: ✅","Modérer messages: Option (délégation possible)","Partager fichiers: ✅","Rechercher: ✅","Gérer notifications: ✅","Gérer intégrations/bots: ❌"]}
{"type":"entity","entityType":"permissions_matrix","name":"SUPCHAT Invité Permissions","observations":["Créer workspace: ❌","Inviter membres: ❌","Supprimer workspace: ❌","Créer canal: ❌","Gérer membres: ❌","Modifier rôles: ❌","Configurer permissions: ❌","Poster messages: Limité (selon réglage canal)","Modérer messages: ❌","Partager fichiers: Limité (selon réglage canal)","Rechercher: ✅","Gérer notifications: ✅","Gérer intégrations/bots: ❌"]}
{"type":"entity","entityType":"channel_types","name":"SUPCHAT Channel Types & Permissions","observations":["Canal public: accès tous membres workspace","Canal privé: accès sur invitation uniquement","Message direct (DM): 1-à-1 privé dans workspace","Canal public - voir/poster/partager: ✅ tous, gérer/modifier/supprimer: Admin","Canal privé - voir/poster/partager: sur invitation, gérer/modifier/supprimer: Admin/Owner","DM - voir/poster/partager: ✅ participants, pas de gestion"]}
{"type":"entity","entityType":"permissions_granularity","name":"SUPCHAT Permissions Granularity","observations":["Permissions configurables par utilisateur individuel","Permissions configurables par groupe d'utilisateurs","Permissions configurables par canal spécifique","Admins peuvent déléguer ou affiner droits selon besoin","Logique ACL/roles extensible pour droits précis (épingler message, renommer canal, etc.)","Système ultra-flexible pour tous besoins organisationnels"]}
{"type":"entity","name":"SUPCHAT_Docker_Architecture_2025","entityType":"Configuration","observations":["Architecture multi-environnements avec Docker Compose v2","2 environnements distincts : Development et Test","Ports différenciés pour éviter les conflits","Réseaux isolés pour chaque environnement","MongoDB versions séparées avec ports différents"]}
{"type":"entity","name":"SUPCHAT_Development_Environment","entityType":"Docker_Environment","observations":["Fichier : docker-compose.development.yml","API : port 3000:3000 (tous interfaces)","Web : port 80:8080 (tous interfaces)","DB : port 127.0.0.1:27017:27017 (localhost uniquement)","cAdvisor : port 127.0.0.1:8080:8080","Réseau : supchat-network","Variables d'environnement via .env.dev","Hot-reload activé pour dev"]}
{"type":"entity","name":"SUPCHAT_Test_Environment","entityType":"Docker_Environment","observations":["Fichier : docker-compose.test.yml","API : port 127.0.0.1:3001:3000 (port externe différent)","Web : port 127.0.0.1:81:8080 (port externe différent)","DB : port 127.0.0.1:27018:27017 (port externe différent)","Réseau : supchat-test-network (isolé)","Base de données : supchat_test (séparée)","Secrets de test fixes et sécurisés","Pas de restart automatique"]}
{"type":"entity","name":"SupChat Docker Architecture","entityType":"infrastructure","observations":["Architecture Docker Compose avec 2 environnements isolés : development et test","Development: API port 3000, Web port 80, DB port 27017, réseau supchat-network","Test: API port 3001, Web port 81, DB port 27018, réseau supchat-test-network isolé","Fichiers env séparés: .env.dev pour development, .env.test pour test","Services de test: api-test, web-test, db-test avec configuration complètement isolée","MongoDB test utilise des credentials fixes (root/rootpassword) et base supchat_test","JWT et secrets de test fixes pour reproductibilité des tests","URLs de test ajustées: FRONTEND_URL=http://localhost:81, API_URL=http://localhost:3001/api","RÈGLE CRITIQUE: Docker Compose nécessite --env-file explicite pour charger les variables d'environnement","Commande correcte pour test: docker compose -f docker-compose.test.yml --env-file .env.test up --build -d","Commande correcte pour dev: docker compose -f docker-compose.development.yml --env-file .env.dev up --build -d","TOUJOURS préciser --env-file [fichier] AVANT la commande up/down/build","Sans --env-file, Docker Compose ne charge pas correctement les variables d'environnement","Pattern général: docker compose -f [compose-file] --env-file [env-file] [commande]"]}
{"type":"entity","name":"SupChat Test Environment Configuration","entityType":"configuration","observations":["Environnement de test complètement isolé avec ports différenciés","Base de données MongoDB test sur port 27018 avec volume mongo-test-data","API test sur port 3001 avec healthcheck et NODE_ENV=test","Web test sur port 81 avec VITE_API_URL pointant vers localhost:3001","Réseau supchat-test-network isolé pour éviter les conflits","Variables d'environnement test dans .env.test avec valeurs fixes","Secrets JWT/CSRF spécifiques test pour sécurité et reproductibilité","Configuration email et OAuth identique au dev pour simplicité","Commande de démarrage complète: docker compose -f docker-compose.test.yml --env-file .env.test up --build -d","Commande d'arrêt: docker compose -f docker-compose.test.yml --env-file .env.test down","Variables d'environnement dans .env.test chargées uniquement avec --env-file .env.test","Build Docker nécessite --env-file pour substitution des variables dans docker-compose.test.yml"]}
{"type":"entity","name":"Docker Compose --env-file Rule","entityType":"Development Configuration","observations":["Docker Compose commands must include --env-file for proper environment variable loading","Pattern: docker compose -f docker-compose.X.yml --env-file .env.X [command]","Essential for test environment: docker compose -f docker-compose.test.yml --env-file .env.test","Essential for development: docker compose -f docker-compose.development.yml --env-file .env.dev","Without --env-file flag, environment variables from .env files are not loaded properly","This applies to ALL docker compose commands: up, down, build, logs, etc.","Must be used consistently across all Docker Compose operations for SUPCHAT project"]}
{"type":"entity","name":"SUPCHAT Configuration Environnement","entityType":"Configuration","observations":["Plusieurs fichiers .env à la racine selon l'environnement: .env.dev, .env.test, etc.","PAS de fichier .env tout court dans SUPCHAT","docker-compose.test.yml utilise .env.test à la racine","Configuration Docker-first obligatoire","Docker Compose commands must include --env-file for proper environment variable loading","Pattern: docker compose -f docker-compose.X.yml --env-file .env.X [command]","TOUJOURS consulter la mémoire avant de commencer à travailler","Fichier copilot-instructions.md doit être mis à jour avec toutes les recommandations de la mémoire"]}
{"type":"entity","name":"SUPCHAT Configuration Docker Tests","entityType":"Configuration","observations":["Utilise docker-compose.test.yml avec --env-file .env.test obligatoirement","Tests frontend executés via: docker compose -f docker-compose.test.yml --env-file .env.test exec web-test npm test","112 tests frontend passent avec succès après corrections","Environnement Docker test isolé avec MongoDB sur port 27018","Interdiction absolue de fichiers .env dans web/, api/, mobile/ - seulement .env.* à la racine"]}
{"type":"entity","name":"Vitest Configuration SUPCHAT","entityType":"Configuration","observations":["Alias @contexts OBLIGATOIRE ajouté dans web/vitest.config.ts","Configuration avec jsdom, globals: true, setupFiles","Alias requis: @components, @pages, @store, @hooks, @services, @styles, @utils, @contexts, @ts_types","Couverture de tests ≥ 70% requise","Mock Service Worker (MSW) v2.1.0 pour les mocks API"]}
{"type":"entity","name":"Test Utils Helpers SUPCHAT","entityType":"Code Pattern","observations":["MockSocketProvider créé dans src/tests/test-utils.tsx","renderWithProviders wrapper avec Redux Provider + MockSocketProvider + BrowserRouter","TestProvider comme wrapper principal pour tous les tests","Mock global du hook useSocket avec vi.mock('@hooks/useSocket')","Pattern validé pour éviter les erreurs de provider dans tous les tests"]}
{"type":"entity","name":"Redux Toolkit SUPCHAT Architecture","entityType":"Architecture","observations":["Redux Toolkit v2.5.1 comme state management central","Slices: authSlice, workspacesSlice, channelsSlice, messagesSlice, etc.","Hooks typés: useAppDispatch, useAppSelector","Store configuré avec configureStore de Redux Toolkit","Types RootState et AppDispatch exportés du store"]}
{"type":"entity","name":"SUPCHAT Tests Frontend Corrections","entityType":"Bug Fix","observations":["Correction de 112 tests frontend passés avec succès","Ajout mock getWorkspaceMembers dans ChannelsPage.test.tsx","Suppression fichier Messaging.test.tsx (test E2E realtime non fonctionnel)","Correction imports vi manquants dans test-utils.tsx","Correction assertions texte français dans ChannelsPage.test.tsx","Tests hooks corrigés avec mocks useSocket appropriés"]}
{"type":"entity","name":"SUPCHAT Stack Technique 2025","entityType":"Technology Stack","observations":["Frontend: React 18 + TypeScript 5.x + Vite 5.4.19 + Redux Toolkit","Backend: Node.js 22 LTS + Express + MongoDB 8.0","Tests: Vitest v1.6.1 + React Testing Library + MSW v2.1.0","Routing: React Router v7.2.0","Validation: Yup v1.6.1","Docker Compose v2 pour tous les environnements"]}
{"type":"entity","name":"SUPCHAT Documentation Conventions","entityType":"Documentation","observations":["Documentation principale: .github/copilot-instructions.md","Conventions Docker-first obligatoires documentées","Patterns de tests validés documentés","Helpers de test configuration finale documentée","Résumé exécutif avec 112/112 tests réussis","Interdictions absolues et règles obligatoires listées"]}
{"type":"entity","name":"SUPCHAT_2025_TESTS_FRONTEND_VALIDATION","entityType":"project_milestone","observations":["Tous les 112 tests frontend passent avec succès dans l'environnement Docker de test","Configuration finale validée avec docker compose -f docker-compose.test.yml --env-file .env.test","Helpers de test validés : renderWithProviders, TestProvider, MockSocketProvider","Mock du hook useSocket configuré globalement pour éviter les erreurs de provider","Alias @contexts ajouté et requis dans la configuration Vitest","Pattern de tests validé avec Vitest + MSW + Redux Toolkit","Architecture de tests Docker-first entièrement opérationnelle"]}
{"type":"entity","name":"SUPCHAT_CONFIGURATION_DOCKER_2025","entityType":"architecture_config","observations":["Fichiers .env.* multiples à la racine selon l'environnement (development, test, production)","Interdiction totale de fichiers .env dans web/, api/, mobile/","Docker Compose v2 avec environnements distincts : development et test actifs","Commandes obligatoires : docker compose -f docker-compose.*.yml --env-file .env.*","Script docker-manager.sh pour gestion automatisée des environnements","Tests uniquement via Docker avec environnement isolé MongoDB port 27018","Hot-reload Vite 5 HMR en développement, nodemon pour API"]}
{"type":"entity","name":"SUPCHAT_TESTS_HELPERS_CONFIGURATION","entityType":"test_infrastructure","observations":["test-utils.tsx avec MockSocketProvider simulant le contexte Socket complet","Mock global du hook useSocket pour tous les tests avec vi.mock","renderWithProviders wrappant Provider Redux + MockSocketProvider + BrowserRouter","TestProvider helper principal validé pour tous les tests React","Configuration Vitest avec alias @contexts obligatoire","Pattern de mock : socket avec id, connected, on, off, emit functions","Tests de hooks mockant directement useSocket pour éviter erreurs de provider"]}
{"type":"entity","name":"SUPCHAT_STACK_TECHNIQUE_2025","entityType":"tech_stack","observations":["Frontend : React 18 + TypeScript 5.x + Redux Toolkit v2.5.1 + Vite 5.4.19","Tests : Vitest v1.6.1 + React Testing Library + MSW v2.1.0","Backend : Node.js 22 LTS + Express + MongoDB 8.0 + Socket.io","Validation : Yup v1.6.1 côté client, Joi/Zod côté serveur","Routing : React Router v7.2.0","Styling : SCSS avec CSS Modules, fichiers _variables.scss, _themes.scss obligatoires","Infrastructure : Docker + Docker Compose v2, scripts Bash modulaires"]}
{"type":"entity","name":"SUPCHAT_REDUX_TOOLKIT_ARCHITECTURE","entityType":"state_management","observations":["Store configuré avec slices modulaires : auth, workspaces, channels, messages, notifications, preferences, reactions","Hooks typés : useAppDispatch, useAppSelector avec types RootState et AppDispatch","Architecture centralisée Redux Toolkit au lieu de Context API","Slices avec createSlice et PayloadAction pour type safety","Configuration store avec configureStore de @reduxjs/toolkit","Gestion d'état globale moderne avec Redux DevTools intégré","Pattern de store modulaire par domaine fonctionnel"]}
{"type":"entity","name":"SUPCHAT_ALIAS_TYPESCRIPT_CONFIGURATION","entityType":"development_config","observations":["Alias configurés : @components, @pages, @store, @hooks, @services, @styles, @utils, @ts_types","Alias @contexts OBLIGATOIRE pour les tests Vitest","Configuration dans vitest.config.ts et tsconfig.json","Résolution des imports avec path.resolve pour chaque alias","Structure modulaire avec séparation claire des responsabilités","Types TypeScript centralisés dans src/types/","Configuration Vite 5 avec optimisations bundle","CORRECTION APPLIQUÉE: Ajout de l'alias @contexts manquant dans web/vite.config.ts","Erreur résolue: [plugin:vite:import-analysis] Failed to resolve import '@contexts/SocketContext'","L'alias @contexts était présent dans vitest.config.ts mais manquait dans vite.config.ts","Ajout cohérent de l'alias @contexts dans tsconfig.app.json également","Configuration complète des alias validée: @components, @pages, @store, @hooks, @services, @styles, @utils, @contexts, @tests, @ts_types","CORRECTION BOUCLE INFINIE AUTHENTICATION: Suppression appel updatePreferences dans axiosInstance.ts","Problème identifié: Token refresh échoue → updatePreferences appelé → boucle infinie","Solution: Déconnexion directe sans mise à jour statut pour éviter nouvelles requêtes API","Erreur résolue: POST /api/auth/refresh 404 + updatePreferences en boucle"]}
{"type":"entity","name":"SUPCHAT_TESTS_CORRECTIONS_2025","entityType":"bugfix_log","observations":["Ajout alias @contexts manquant dans vitest.config.ts - CRITIQUE","Correction mock getWorkspaceMembers dans ChannelsPage.test.tsx","Suppression fichier test realtime vide Messaging.test.tsx","Ajout import vi manquant dans test-utils.tsx","Création MockSocketProvider simulant contexte Socket complet","Mock global useSocket hook pour éviter erreurs Provider dans tous tests","Correction assertions texte français dans ChannelsPage.test.tsx","Tests hooks mockant useSocket directement pour éviter erreurs provider","Correction des erreurs TypeScript dans test-utils.tsx","Remplacement des types 'any' par des types appropriés : (...args: any[]) → (event: string, listener: (...args: unknown[]) => void)","Correction du type storeOverride de 'any' vers 'typeof store' pour type safety","Ajout de eslint-disable react-refresh/only-export-components pour fichier utilitaires de test","Amélioration des types MockSocket avec signatures d'événements appropriées","Configuration finale test-utils.tsx validée sans erreurs de compilation"]}
{"type":"entity","name":"SUPCHAT_DOCUMENTATION_STRUCTURE","entityType":"documentation","observations":["Documentation principale centralisée dans .github/copilot-instructions.md","Suppression doublon copilot-instructions.md à la racine","Structure organisée : règles critiques, architecture, stack technique, conventions","Résumé exécutif avec validation 112/112 tests frontend","Conventions Docker obligatoires avec interdictions absolues","Patterns de test validés avec exemples concrets","Configuration finale validée après résolution complète des tests","Règle CONSULTATION MÉMOIRE AUTOMATIQUE ajoutée comme priorité absolue dans les instructions","GitHub Copilot doit OBLIGATOIREMENT consulter mcp_memory_read_graph ou mcp_memory_search_nodes au début de chaque nouvelle conversation","Consultation mémoire requise AVANT toute action ou réponse pour récupérer contexte complet","Pattern de consultation : récupérer contexte projet, conventions validées, historique corrections, stack technique","Règle ajoutée en position #1 dans les règles obligatoires ET en position #0 dans les conseils Copilot","Documentation mise à jour pour garantir continuité du contexte entre conversations"]}
{"type":"entity","name":"SUPCHAT Frontend","entityType":"Projet","observations":["CORRECTION BOUCLE INFINIE AUTHENTICATION - FINALE: Ajout vérification isAuthenticated dans logoutUtils.ts ligne 16 pour éviter appel updatePreferences si utilisateur non connecté. Résout le problème de boucle infinie causé par updatePreferences appelé lors de la déconnexion automatique après échec du token refresh.","CORRECTION PAGE REFRESH ENVOI MESSAGE - DEFINITIVE: Ajout e.preventDefault() et e.stopPropagation() dans handleSendMessage d'ChannelsPage et handleSubmit de MessageInput. Résout le problème de rafraîchissement automatique de la page lors de l'envoi de messages. L'événement est maintenant passé depuis MessageInput jusqu'à handleSendMessage pour empêcher la soumission du formulaire HTML natif.","Suppression définitive des anciennes pages de canaux : ChannelsPage et ChannelChatPage. Désormais, seule la page unique ChannelsPage (ex-UnifiedChannelPage) est utilisée pour toute la gestion des canaux et du chat. Toute la logique de navigation, permissions, chat, gestion membres/paramètres passe par cette page unique. L'arborescence et la documentation ont été mises à jour pour refléter ce changement."]}
{"type":"entity","entityType":"convention","name":"SUPCHAT Code Conventions","observations":["Tous les types TypeScript métiers (User, Channel, Message, etc.) doivent être définis dans le dossier web/src/types/ dans un fichier dédié, et importés dans les composants/hooks. Ne jamais redéfinir un type métier dans un composant ou un hook, sauf pour des types purement locaux/éphémères.","Ne jamais utiliser 'any' dans les hooks, composants ou helpers TypeScript du projet SUPCHAT. Toujours typer les objets métiers (User, Channel, Message, ChannelMember, etc.) via les interfaces du dossier web/src/types/. Les tableaux d'utilisateurs, messages, channels, etc. doivent être typés explicitement (ex: Message[], ChannelMember[]). Les paramètres d'erreur doivent être castés avec (err as Error) si besoin. Les objets author, user, etc. doivent être typés User ou partiels correspondants. Les types métiers ne doivent jamais être redéfinis localement."]}
{"type":"entity","entityType":"Projet","name":"SUPCHAT","observations":["Correction du test ChannelsPage.noReload : la vérification du mock handleSendMessage a été adaptée pour matcher la signature réelle (message, file, event). Le test vérifie maintenant que le premier argument est bien le texte envoyé ('Hello world!'). Tous les tests critiques de la page Channels passent désormais correctement via Docker Compose test.","À faire : Corriger le test vide src/tests/realtime/Messaging.test.tsx. Ce fichier ne contient aucune suite de test (describe/it). Pour le corriger, il faut soit ajouter un test Vitest valide (describe/it), soit supprimer le fichier s’il n’est plus utile. Cela permettra d’avoir 0 échec lors de la prochaine exécution Docker Compose test."]}
{"type":"relation","from":"SUPCHAT_Docker_Architecture_2025","to":"SUPCHAT_Development_Environment","relationType":"includes"}
{"type":"relation","from":"SUPCHAT_Docker_Architecture_2025","to":"SUPCHAT_Test_Environment","relationType":"includes"}
{"type":"relation","from":"SUPCHAT_Development_Environment","to":"SUPCHAT_Test_Environment","relationType":"is_isolated_from"}
{"type":"relation","from":"SUPCHAT_2025_TESTS_FRONTEND_VALIDATION","to":"SUPCHAT_TESTS_HELPERS_CONFIGURATION","relationType":"utilise"}
{"type":"relation","from":"SUPCHAT_2025_TESTS_FRONTEND_VALIDATION","to":"SUPCHAT_CONFIGURATION_DOCKER_2025","relationType":"exécute dans"}
{"type":"relation","from":"SUPCHAT_TESTS_HELPERS_CONFIGURATION","to":"SUPCHAT_ALIAS_TYPESCRIPT_CONFIGURATION","relationType":"dépend de"}
{"type":"relation","from":"SUPCHAT_REDUX_TOOLKIT_ARCHITECTURE","to":"SUPCHAT_STACK_TECHNIQUE_2025","relationType":"fait partie de"}
{"type":"relation","from":"SUPCHAT_TESTS_CORRECTIONS_2025","to":"SUPCHAT_2025_TESTS_FRONTEND_VALIDATION","relationType":"a permis"}
{"type":"relation","from":"SUPCHAT_DOCUMENTATION_STRUCTURE","to":"SUPCHAT_2025_TESTS_FRONTEND_VALIDATION","relationType":"documente"}
{"type":"relation","from":"SUPCHAT_ALIAS_TYPESCRIPT_CONFIGURATION","to":"SUPCHAT_STACK_TECHNIQUE_2025","relationType":"configure"}
{"type":"relation","from":"SUPCHAT_CONFIGURATION_DOCKER_2025","to":"SUPCHAT_STACK_TECHNIQUE_2025","relationType":"orcherstre"}