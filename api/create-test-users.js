const mongoose = require('mongoose')
const User = require('./models/User')
const Workspace = require('./models/Workspace')
const Channel = require('./models/Channel')
const Message = require('./models/Message')
const bcrypt = require('bcrypt')
require('dotenv').config()

async function createTestUsers() {
    try {
        // Connexion √† la base avec authentification
        const mongoUri = `mongodb://${process.env.MONGO_INITDB_ROOT_USERNAME}:${process.env.MONGO_INITDB_ROOT_PASSWORD}@${process.env.MONGO_HOST}:${process.env.MONGO_PORT}/${process.env.MONGO_DB}?authSource=admin`
        await mongoose.connect(mongoUri)

        console.log('üîó Connexion √† MongoDB r√©ussie')

        // ===== CR√âATION DES UTILISATEURS =====
        console.log('\nüìù Cr√©ation des utilisateurs...')
        const testUsers = [
            {
                name: 'Admin',
                email: 'admin@admin.fr',
                password: await bcrypt.hash('admin', 10),
                role: 'admin',
            },
            {
                name: 'John Doe',
                email: 'john.doe@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'Jane Smith',
                email: 'jane.smith@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'Alice Martin',
                email: 'alice.martin@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'Bob Wilson',
                email: 'bob.wilson@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'Charlie Brown',
                email: 'charlie.brown@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'David Taylor',
                email: 'david.taylor@example.com',
                password: await bcrypt.hash('user', 10),
            },
            {
                name: 'Emma Garcia',
                email: 'emma.garcia@example.com',
                password: await bcrypt.hash('user', 10),
            },
        ]

        for (const userData of testUsers) {
            // V√©rifier si l'utilisateur existe d√©j√†
            const existingUser = await User.findOne({ email: userData.email })
            if (existingUser) {
                // Correction : forcer le status √† offline si d√©j√† existant
                if (existingUser.status !== 'offline') {
                    existingUser.status = 'offline'
                    await existingUser.save()
                    console.log(`Utilisateur ${userData.email} mis hors ligne`)
                } else {
                    console.log(`Utilisateur ${userData.email} existe d√©j√†`)
                }
            } else {
                // Cr√©ation avec status offline par d√©faut
                const newUser = new User({ ...userData, status: 'offline' })
                await newUser.save()
                console.log(`Utilisateur cr√©√©: ${userData.email}`)
            }
        }

        // ===== CR√âATION DES WORKSPACES DE TEST =====
        console.log('\nüè¢ Cr√©ation des workspaces de test...')

        const users = await User.find({})
        const admin = users.find((u) => u.email === 'admin@admin.fr')
        const john = users.find((u) => u.email === 'john.doe@example.com')
        const jane = users.find((u) => u.email === 'jane.smith@example.com')
        const alice = users.find((u) => u.email === 'alice.martin@example.com')
        const bob = users.find((u) => u.email === 'bob.wilson@example.com')

        const testWorkspaces = [
            {
                name: 'Workspace Public Test',
                description:
                    'Un workspace public pour les tests de collaboration',
                isPublic: true,
                type: 'public',
                owner: admin._id,
                members: [admin._id, john._id, jane._id, alice._id],
            },
            {
                name: 'Workspace Priv√© √âquipe',
                description:
                    "Un workspace priv√© pour l'√©quipe de d√©veloppement",
                isPublic: false,
                type: 'private',
                owner: john._id,
                members: [john._id, jane._id, bob._id],
            },
            {
                name: 'Marketing & Communication',
                description:
                    'Espace d√©di√© aux campagnes marketing et communication',
                isPublic: true,
                type: 'public',
                owner: jane._id,
                members: [jane._id, alice._id, admin._id],
            },
            {
                name: 'Projet Secret',
                description: 'Projet confidentiel - acc√®s restreint',
                isPublic: false,
                type: 'private',
                owner: alice._id,
                members: [alice._id, admin._id],
            },
        ]

        const createdWorkspaces = []
        for (const workspaceData of testWorkspaces) {
            const existingWorkspace = await Workspace.findOne({
                name: workspaceData.name,
            })
            if (existingWorkspace) {
                console.log(`Workspace "${workspaceData.name}" existe d√©j√†`)
                createdWorkspaces.push(existingWorkspace)
            } else {
                const newWorkspace = new Workspace(workspaceData)
                await newWorkspace.save()
                createdWorkspaces.push(newWorkspace)
                console.log(`Workspace cr√©√©: "${workspaceData.name}"`)
            }
        } // ===== CR√âATION DES CHANNELS DE TEST =====
        console.log('\nüì∫ Cr√©ation des channels de test...')

        for (const workspace of createdWorkspaces) {
            const testChannels = [
                {
                    name: 'g√©n√©ral',
                    description: 'Channel g√©n√©ral pour les discussions',
                    isPublic: true,
                    type: 'public',
                    workspace: workspace._id,
                    createdBy: workspace.owner,
                    members: workspace.members,
                },
                {
                    name: 'annonces',
                    description: 'Canal pour les annonces importantes',
                    isPublic: true,
                    type: 'public',
                    workspace: workspace._id,
                    createdBy: workspace.owner,
                    members: workspace.members,
                },
            ]

            // Ajouter un channel priv√© pour les workspaces avec plus de 2 membres
            if (workspace.members.length > 2) {
                testChannels.push({
                    name: '√©quipe-core',
                    description: "Channel priv√© pour l'√©quipe principale",
                    isPublic: false,
                    type: 'private',
                    workspace: workspace._id,
                    createdBy: workspace.owner,
                    members: workspace.members.slice(0, 2), // Seulement les 2 premiers membres
                })
            }

            for (const channelData of testChannels) {
                const existingChannel = await Channel.findOne({
                    name: channelData.name,
                    workspace: workspace._id,
                })
                if (existingChannel) {
                    console.log(
                        `Channel "${channelData.name}" existe d√©j√† dans "${workspace.name}"`
                    )
                } else {
                    const newChannel = new Channel(channelData)
                    await newChannel.save()

                    // Ajouter le channel au workspace
                    workspace.channels.push(newChannel._id)
                    await workspace.save()

                    console.log(
                        `Channel cr√©√©: "${channelData.name}" dans "${workspace.name}"`
                    )
                }
            }
        }

        // ===== CR√âATION DE MESSAGES DE TEST =====
        console.log('\nüí¨ Cr√©ation des messages de test...')

        const channels = await Channel.find({}).populate('workspace')
        const sampleMessages = [
            'Bonjour tout le monde ! üëã',
            "Comment √ßa va aujourd'hui ?",
            "Quelqu'un a des nouvelles du projet ?",
            'R√©union pr√©vue √† 14h en salle de conf√©rence',
            "N'oubliez pas de valider vos timesheet üìù",
            'Excellent travail sur la derni√®re fonctionnalit√© ! üéâ',
            'Des questions sur les nouvelles sp√©cifications ?',
            'Coffee break dans 10 minutes ‚òï',
        ]

        for (const channel of channels.slice(0, 3)) {
            // Seulement les 3 premiers channels
            for (let i = 0; i < 3; i++) {
                const randomUser =
                    channel.members[
                        Math.floor(Math.random() * channel.members.length)
                    ]
                const randomMessage =
                    sampleMessages[
                        Math.floor(Math.random() * sampleMessages.length)
                    ]

                const existingMessage = await Message.findOne({
                    content: randomMessage,
                    channel: channel._id,
                })

                if (!existingMessage) {
                    const newMessage = new Message({
                        content: randomMessage,
                        author: randomUser,
                        channel: channel._id,
                        workspace: channel.workspace._id,
                        createdAt: new Date(
                            Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000
                        ), // Messages des 7 derniers jours
                    })
                    await newMessage.save()
                    console.log(
                        `Message cr√©√© dans "${channel.name}": "${randomMessage.substring(0, 30)}..."`
                    )
                }
            }
        } // Lister tous les utilisateurs
        const allUsers = await User.find({}).select('email name createdAt')
        console.log('\nüë• Utilisateurs en base:')
        allUsers.forEach((user) => {
            console.log(`- ${user.email} (${user.name})`)
        })

        // Lister tous les workspaces
        const allWorkspaces = await Workspace.find({}).populate(
            'owner',
            'name email'
        )
        console.log('\nüè¢ Workspaces cr√©√©s:')
        allWorkspaces.forEach((workspace) => {
            console.log(
                `- "${workspace.name}" (${workspace.type}) - Owner: ${workspace.owner.name}`
            )
        }) // Lister tous les channels
        const allChannels = await Channel.find({}).populate('workspace', 'name')
        console.log('\nüì∫ Channels cr√©√©s:')
        allChannels.forEach((channel) => {
            // V√©rifier que le workspace existe avant d'acc√©der √† ses propri√©t√©s
            if (channel.workspace && channel.workspace.name) {
                console.log(
                    `- "${channel.name}" (${channel.type}) in "${channel.workspace.name}"`
                )
            } else {
                console.log(
                    `- "${channel.name}" (${channel.type}) in [workspace supprim√©]`
                )
            }
        })

        console.log('\nüéâ Donn√©es de test cr√©√©es avec succ√®s !')
        console.log('\nüìã Comptes de connexion:')
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê')
        console.log('‚îÇ Email                   ‚îÇ Password ‚îÇ Role    ‚îÇ')
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§')
        console.log('‚îÇ admin@admin.fr          ‚îÇ admin    ‚îÇ admin   ‚îÇ')
        console.log('‚îÇ john.doe@example.com    ‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îÇ jane.smith@example.com  ‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îÇ alice.martin@example.com‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îÇ bob.wilson@example.com  ‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îÇ charlie.brown@example.com‚îÇ user    ‚îÇ user    ‚îÇ')
        console.log('‚îÇ david.taylor@example.com‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îÇ emma.garcia@example.com ‚îÇ user     ‚îÇ user    ‚îÇ')
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò')

        await mongoose.connection.close()
        console.log('\n‚úÖ Termin√©!')
    } catch (error) {
        console.error('‚ùå Erreur:', error)
        process.exit(1)
    }
}

createTestUsers()
