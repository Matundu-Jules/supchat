#!/usr/bin/env node

const axios = require('axios')

const baseURL = 'http://localhost:5173/api'

async function testInvitation() {
    try {
        console.log("üîç Test complet d'invitation via le frontend...\n")

        // Cr√©er une instance axios avec gestion des cookies
        const client = axios.create({
            baseURL,
            withCredentials: true,
            headers: {
                'Content-Type': 'application/json',
            },
        })

        // 1. R√©cup√©rer le token CSRF
        console.log('1. R√©cup√©ration du token CSRF...')
        const csrfResponse = await client.get('/csrf-token')
        const csrfToken = csrfResponse.data.csrfToken
        console.log(
            '‚úÖ Token CSRF r√©cup√©r√©:',
            csrfToken.substring(0, 20) + '...'
        )

        // Ajouter le token CSRF aux headers
        client.defaults.headers['X-CSRF-TOKEN'] = csrfToken

        // 2. Cr√©er un utilisateur de test s'il n'existe pas
        console.log("\n2. Cr√©ation d'un utilisateur de test...")
        try {
            await client.post('/auth/register', {
                name: 'Test User',
                email: 'test@test.com',
                password: 'TestPassword123!',
                confirmPassword: 'TestPassword123!',
            })
            console.log('‚úÖ Utilisateur de test cr√©√©')
        } catch (err) {
            if (
                err.response?.status === 400 &&
                err.response?.data?.message?.includes('existe d√©j√†')
            ) {
                console.log('‚ÑπÔ∏è Utilisateur de test existe d√©j√†')
            } else {
                throw err
            }
        }

        // 3. Se connecter avec l'utilisateur de test
        console.log("\n3. Connexion avec l'utilisateur de test...")
        const loginResponse = await client.post('/auth/login', {
            email: 'test@test.com',
            password: 'TestPassword123!',
        })
        console.log(
            '‚úÖ Connexion r√©ussie, utilisateur:',
            loginResponse.data.user?.email
        )

        // 4. Cr√©er un utilisateur √† inviter s'il n'existe pas
        console.log("\n4. Cr√©ation d'un utilisateur √† inviter...")
        try {
            await client.post('/auth/register', {
                name: 'Invited User',
                email: 'invited@test.com',
                password: 'TestPassword123!',
                confirmPassword: 'TestPassword123!',
            })
            console.log('‚úÖ Utilisateur √† inviter cr√©√©')
        } catch (err) {
            if (
                err.response?.status === 400 &&
                err.response?.data?.message?.includes('existe d√©j√†')
            ) {
                console.log('‚ÑπÔ∏è Utilisateur √† inviter existe d√©j√†')
            } else {
                throw err
            }
        }

        // 5. R√©cup√©rer la liste des workspaces
        console.log('\n5. R√©cup√©ration des workspaces...')
        const workspacesResponse = await client.get('/workspaces')
        const workspaces = workspacesResponse.data
        console.log(
            '‚úÖ Workspaces r√©cup√©r√©s:',
            workspaces.length,
            'workspace(s)'
        )

        let testWorkspaceId = null

        // 6. Cr√©er un workspace de test si aucun n'existe
        if (workspaces.length === 0) {
            console.log("\n6. Cr√©ation d'un workspace de test...")
            const createResponse = await client.post('/workspaces', {
                name: 'Test Workspace',
                description: "Workspace pour test d'invitation",
                isPublic: true,
            })
            testWorkspaceId = createResponse.data._id
            console.log('‚úÖ Workspace de test cr√©√©:', testWorkspaceId)
        } else {
            testWorkspaceId = workspaces[0]._id
            console.log(
                '‚úÖ Utilisation du workspace existant:',
                testWorkspaceId
            )
        }

        // 7. Tester l'invitation d'un utilisateur existant
        console.log("\n7. Test d'invitation d'un utilisateur existant...")
        try {
            const inviteResponse = await client.post(
                `/workspaces/${testWorkspaceId}/invite`,
                {
                    email: 'invited@test.com',
                }
            )
            console.log('‚úÖ Invitation r√©ussie:', inviteResponse.data)
        } catch (err) {
            console.log("‚ùå Erreur lors de l'invitation:", {
                status: err.response?.status,
                message: err.response?.data?.message,
                data: err.response?.data,
            })
        }

        // 8. Tester l'invitation d'un utilisateur inexistant
        console.log("\n8. Test d'invitation d'un utilisateur inexistant...")
        try {
            const inviteResponse = await client.post(
                `/workspaces/${testWorkspaceId}/invite`,
                {
                    email: 'nonexistent@test.com',
                }
            )
            console.log(
                "‚ùå L'invitation d'un utilisateur inexistant a r√©ussi (probl√®me):",
                inviteResponse.data
            )
        } catch (err) {
            console.log(
                "‚úÖ Invitation d'utilisateur inexistant correctement bloqu√©e:",
                {
                    status: err.response?.status,
                    message: err.response?.data?.message,
                }
            )
        }
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', {
            message: error.message,
            status: error.response?.status,
            data: error.response?.data,
        })
    }
}

testInvitation()
