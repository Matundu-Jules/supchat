#!/bin/bash

# Module des utilitaires pour SUPCHAT Docker Manager
# Auteur: SUPCHAT Team

# Fonction de backup de la base de donn√©es
backup_database() {
    compose_file=$(select_environment)
    result=$?
    
    if [[ $result -eq 1 ]]; then
        if [[ "$compose_file" == "NONE" ]]; then
            echo -e "\n${RED}‚ùå Aucun environnement Docker n'est en cours d'ex√©cution${NC}"
        else
            echo -e "${RED}‚ùå Choix d'environnement invalide${NC}"
        fi
        pause
        return 1
    fi
    
    env_name=$(get_env_name "$compose_file")
    echo -e "\n${BLUE}üíæ Backup de la base de donn√©es MongoDB (${env_name})...${NC}"
    
    # V√©rifier si le container db est en cours d'ex√©cution
    if eval "docker-compose $compose_file ps db" | grep -q "Up"; then
        backup_dir="./backups"
        mkdir -p "$backup_dir"
        
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_file="$backup_dir/mongodb_backup_${env_name}_$timestamp"
        
        echo "üì¶ Cr√©ation du backup..."
        eval "docker-compose $compose_file exec -T db mongodump --out /tmp/backup"
        eval "docker-compose $compose_file exec -T db tar -czf /tmp/backup_$timestamp.tar.gz -C /tmp backup"
        docker cp "$(eval "docker-compose $compose_file ps -q db"):/tmp/backup_$timestamp.tar.gz" "$backup_file.tar.gz"
        
        echo -e "${GREEN}‚úÖ Backup cr√©√©: $backup_file.tar.gz${NC}"
    else
        echo -e "${RED}‚ùå Le container de base de donn√©es n'est pas en cours d'ex√©cution dans l'environnement ${env_name}${NC}"
    fi
    pause
}

# Fonction de backup pour la production (menu post-d√©marrage)
backup_database_prod() {
    echo -e "\n${BLUE}üíæ Backup de la base de donn√©es MongoDB (production)...${NC}"
    if docker-compose -f docker-compose.prod.yml ps db | grep -q "Up"; then
        backup_dir="./backups"
        mkdir -p "$backup_dir"
        
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_file="$backup_dir/mongodb_backup_prod_$timestamp"
        
        echo "üì¶ Cr√©ation du backup..."
        docker-compose -f docker-compose.prod.yml exec -T db mongodump --out /tmp/backup
        docker-compose -f docker-compose.prod.yml exec -T db tar -czf "/tmp/backup_$timestamp.tar.gz" -C /tmp backup
        docker cp "$(docker-compose -f docker-compose.prod.yml ps -q db):/tmp/backup_$timestamp.tar.gz" "$backup_file.tar.gz"
        
        echo -e "${GREEN}‚úÖ Backup cr√©√©: $backup_file.tar.gz${NC}"
    else
        echo -e "${RED}‚ùå Le container de base de donn√©es n'est pas en cours d'ex√©cution${NC}"
    fi
    pause
}

# Fonction pour ouvrir les URLs de l'application
open_urls() {
    echo -e "\n${BLUE}üåê URLs de l'application SUPCHAT:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${GREEN}Frontend (Web):${NC}     http://localhost:80"
    echo -e "${GREEN}API (Backend):${NC}      http://localhost:3000"
    echo -e "${GREEN}API Health:${NC}         http://localhost:3000/api/health"
    echo -e "${GREEN}API Docs (Swagger):${NC} http://localhost:3000/api-docs"
    echo -e "${GREEN}MongoDB:${NC}            localhost:27017"
    echo -e "${GREEN}cAdvisor:${NC}           http://localhost:8080"
    echo ""
    
    read -p "Voulez-vous ouvrir une URL dans le navigateur ? (y/N): " open_browser
    if [[ "$open_browser" =~ ^[Yy]$ ]]; then
        echo "Quelle URL voulez-vous ouvrir ?"
        echo "  1) Frontend (Web)"
        echo "  2) API Health Check"
        echo "  3) API Documentation"
        echo "  4) cAdvisor (Monitoring)"
        read -p "Choix (1-4): " url_choice
        
        case "$url_choice" in
            1) 
                if command -v start &> /dev/null; then
                    start "http://localhost:80"
                elif command -v xdg-open &> /dev/null; then
                    xdg-open "http://localhost:80"
                elif command -v open &> /dev/null; then
                    open "http://localhost:80"
                else
                    echo -e "${YELLOW}Impossible d'ouvrir automatiquement. URL: http://localhost:80${NC}"
                fi
                ;;
            2) 
                if command -v start &> /dev/null; then
                    start "http://localhost:3000/api/health"
                elif command -v xdg-open &> /dev/null; then
                    xdg-open "http://localhost:3000/api/health"
                elif command -v open &> /dev/null; then
                    open "http://localhost:3000/api/health"
                else
                    echo -e "${YELLOW}Impossible d'ouvrir automatiquement. URL: http://localhost:3000/api/health${NC}"
                fi
                ;;
            3) 
                if command -v start &> /dev/null; then
                    start "http://localhost:3000/api-docs"
                elif command -v xdg-open &> /dev/null; then
                    xdg-open "http://localhost:3000/api-docs"
                elif command -v open &> /dev/null; then
                    open "http://localhost:3000/api-docs"
                else
                    echo -e "${YELLOW}Impossible d'ouvrir automatiquement. URL: http://localhost:3000/api-docs${NC}"
                fi
                ;;
            4) 
                if command -v start &> /dev/null; then
                    start "http://localhost:8080"
                elif command -v xdg-open &> /dev/null; then
                    xdg-open "http://localhost:8080"
                elif command -v open &> /dev/null; then
                    open "http://localhost:8080"
                else
                    echo -e "${YELLOW}Impossible d'ouvrir automatiquement. URL: http://localhost:8080${NC}"
                fi
                ;;
            *) 
                echo -e "${RED}‚ùå Choix invalide${NC}" 
                ;;
        esac
    fi
    pause
}

# Fonction de nettoyage complet
cleanup() {
    echo -e "\n${RED}üßπ Options de nettoyage du projet...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${WHITE}Choisissez le type de nettoyage :${NC}"
    echo -e "${YELLOW}  1)${NC} üîÑ Nettoyage SOFT (containers + images, GARDE les volumes)"
    echo -e "${RED}  2)${NC} üí• Nettoyage COMPLET (containers + images + volumes - PERTE DE DONN√âES)"
    echo -e "${CYAN}  3)${NC} üìä Voir ce qui sera supprim√©"
    echo -e "${WHITE}  0)${NC} ‚ùå Annuler"
    echo ""
    read -p "Votre choix (0-3): " cleanup_choice
    
    case $cleanup_choice in
        1)
            echo -e "\n${YELLOW}üîÑ Nettoyage SOFT (pr√©servation des donn√©es)...${NC}"
            echo -e "${GREEN}‚úÖ Les volumes (base de donn√©es) seront PR√âSERV√âS${NC}"
            read -p "Continuer ? (y/N): " confirm
            
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "üõë Arr√™t des services..."
                docker-compose down 2>/dev/null
                docker-compose -f docker-compose.prod.yml down 2>/dev/null
                docker-compose -f docker-compose.test.yml down 2>/dev/null
                
                echo "üóëÔ∏è Suppression des images..."
                docker images | grep "$PROJECT_NAME" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null
                
                echo "üßΩ Nettoyage des ressources non utilis√©es..."
                docker system prune -f
                
                echo -e "${GREEN}‚úÖ Nettoyage SOFT termin√© ! Donn√©es pr√©serv√©es.${NC}"
            else
                echo -e "${YELLOW}Nettoyage annul√©${NC}"
            fi
            ;;
        2)
            echo -e "\n${RED}üí• Nettoyage COMPLET (DESTRUCTEUR)...${NC}"
            echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cela va supprimer:${NC}"
            echo "   ‚Ä¢ Tous les containers"
            echo "   ‚Ä¢ Toutes les images du projet"
            echo -e "${RED}   ‚Ä¢ TOUS LES VOLUMES (base de donn√©es MongoDB)${NC}"
            echo -e "${RED}   ‚Ä¢ TOUS LES FICHIERS STOCK√âS${NC}"
            echo ""
            echo -e "${YELLOW}üí° Conseil: Utilisez l'option 17 (Backup) avant ce nettoyage${NC}"
            echo ""
            read -p "√ätes-vous VRAIMENT s√ªr ? Tapez 'DELETE' pour confirmer: " confirm
            
            if [[ "$confirm" == "DELETE" ]]; then
                echo "üõë Arr√™t des services..."
                docker-compose down -v 2>/dev/null
                docker-compose -f docker-compose.prod.yml down -v 2>/dev/null
                docker-compose -f docker-compose.test.yml down -v 2>/dev/null
                
                echo "üóëÔ∏è Suppression des images..."
                docker images | grep "$PROJECT_NAME" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null
                
                echo "üßΩ Nettoyage des ressources non utilis√©es..."
                docker system prune -f
                
                echo -e "${GREEN}‚úÖ Nettoyage COMPLET termin√© ! Toutes les donn√©es supprim√©es.${NC}"
            else
                echo -e "${YELLOW}Nettoyage COMPLET annul√© (bonne d√©cision !)${NC}"
            fi
            ;;
        3)
            echo -e "\n${CYAN}üìä Analyse de ce qui serait supprim√©...${NC}"
            echo ""
            echo -e "${BLUE}üê≥ Containers en cours:${NC}"
            echo "D√©veloppement:"
            docker-compose ps 2>/dev/null || echo "  Aucun"
            echo "Production:"
            docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "  Aucun"
            echo "Test:"
            docker-compose -f docker-compose.test.yml ps 2>/dev/null || echo "  Aucun"
            echo ""
            echo -e "${BLUE}üñºÔ∏è Images du projet:${NC}"
            docker images | grep "$PROJECT_NAME" || echo "Aucune image trouv√©e"
            echo ""
            echo -e "${BLUE}üíæ Volumes du projet:${NC}"
            docker volume ls | grep "$PROJECT_NAME" || echo "Aucun volume nomm√© trouv√©"
            echo ""
            echo -e "${YELLOW}üí° Volumes principaux:${NC}"
            echo "   ‚Ä¢ mongo-data (base de donn√©es MongoDB)"
            echo "   ‚Ä¢ Volumes de d√©veloppement (code mapp√©)"
            ;;
        0|*)
            echo -e "${YELLOW}Nettoyage annul√©${NC}"
            ;;
    esac
    pause
}

# Fonction pour cr√©er des donn√©es de test
create_test_data() {
    echo -e "\n${BLUE}üìù Cr√©ation des donn√©es de test...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${YELLOW}Cette option va cr√©er/mettre √† jour des donn√©es de test dans la DB${NC}"
    echo -e "${WHITE}‚Ä¢ 8 utilisateurs de test (admin@admin.fr, john.doe@example.com, etc.)${NC}"
    echo -e "${WHITE}‚Ä¢ 4 workspaces de d√©monstration${NC}"
    echo -e "${WHITE}‚Ä¢ Channels et messages d'exemple${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ Les donn√©es existantes ne seront PAS supprim√©es${NC}"
    echo ""
    
    # V√©rifier si l'API est en cours d'ex√©cution
    if ! docker-compose ps api | grep -q "Up"; then
        echo -e "${RED}‚ùå Le container API n'est pas en cours d'ex√©cution${NC}"
        echo -e "${YELLOW}üí° D√©marrez d'abord l'environnement avec l'option 1 ou 3${NC}"
        pause
        return 1
    fi
    
    read -p "Continuer avec la cr√©ation des donn√©es de test ? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "\n${BLUE}üöÄ Ex√©cution du script de cr√©ation...${NC}"
        
        # Ex√©cuter le script dans le container API
        if docker-compose exec api node create-test-users.js; then
            echo -e "\n${GREEN}‚úÖ Donn√©es de test cr√©√©es avec succ√®s !${NC}"
            echo ""
            echo -e "${CYAN}üìã Comptes de connexion disponibles :${NC}"
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            echo "‚îÇ Email                   ‚îÇ Password ‚îÇ Role    ‚îÇ"
            echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
            echo "‚îÇ admin@admin.fr          ‚îÇ admin    ‚îÇ admin   ‚îÇ"
            echo "‚îÇ john.doe@example.com    ‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îÇ jane.smith@example.com  ‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îÇ alice.martin@example.com‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îÇ bob.wilson@example.com  ‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îÇ charlie.brown@example.com‚îÇ user    ‚îÇ user    ‚îÇ"
            echo "‚îÇ david.taylor@example.com‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îÇ emma.garcia@example.com ‚îÇ user     ‚îÇ user    ‚îÇ"
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        else
            echo -e "\n${RED}‚ùå Erreur lors de la cr√©ation des donn√©es de test${NC}"
            echo -e "${YELLOW}üí° V√©rifiez que la base de donn√©es est accessible${NC}"
        fi
    else
        echo -e "${YELLOW}Cr√©ation des donn√©es de test annul√©e${NC}"
    fi
    pause
}

# Fonction pour r√©initialiser les donn√©es de test
reset_test_data() {
    echo -e "\n${BLUE}üîÑ Reset des donn√©es de test...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${WHITE}Options de reset :${NC}"
    echo -e "${YELLOW}  1)${NC} üîÑ Ajouter des donn√©es de test (sans suppression)"
    echo -e "${RED}  2)${NC} üí• RESET COMPLET - Supprimer TOUTES les donn√©es et recr√©er"
    echo -e "${WHITE}  0)${NC} ‚ùå Annuler"
    echo ""
    read -p "Votre choix (0-2): " reset_choice
    
    case $reset_choice in
        1)
            echo -e "\n${YELLOW}üîÑ Ajout de donn√©es de test (pr√©servation des donn√©es existantes)...${NC}"
            echo -e "${GREEN}‚úÖ Vos donn√©es actuelles seront PR√âSERV√âES${NC}"
            read -p "Continuer ? (y/N): " confirm
            
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                # V√©rifier que l'API est en cours d'ex√©cution
                if docker-compose ps api | grep -q "Up"; then
                    echo "üöÄ Ex√©cution du script d'ajout de donn√©es..."
                    docker-compose exec api node create-test-users.js
                    
                    if [[ $? -eq 0 ]]; then
                        echo -e "${GREEN}‚úÖ Donn√©es de test ajout√©es avec succ√®s !${NC}"
                    else
                        echo -e "${RED}‚ùå Erreur lors de l'ajout des donn√©es de test${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Le container API n'est pas en cours d'ex√©cution${NC}"
                    echo "üí° D√©marrez d'abord l'environnement avec l'option 1 ou 3"
                fi
            else
                echo -e "${YELLOW}Ajout de donn√©es annul√©${NC}"
            fi
            ;;
        2)
            echo -e "\n${RED}üí• RESET COMPLET des donn√©es...${NC}"
            echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cela va:${NC}"
            echo "   ‚Ä¢ SUPPRIMER tous les utilisateurs existants"
            echo "   ‚Ä¢ SUPPRIMER tous les workspaces existants"
            echo "   ‚Ä¢ SUPPRIMER tous les channels existants"
            echo -e "${RED}   ‚Ä¢ SUPPRIMER tous les messages existants${NC}"
            echo ""
            echo -e "${GREEN}‚úÖ Puis recr√©er des donn√©es de test propres${NC}"
            echo ""
            read -p "√ätes-vous VRAIMENT s√ªr ? Tapez 'RESET' pour confirmer: " confirm
            
            if [[ "$confirm" == "RESET" ]]; then
                # V√©rifier que l'API est en cours d'ex√©cution
                if docker-compose ps api | grep -q "Up"; then
                    echo "üóëÔ∏è Reset complet des donn√©es en cours..."
                    docker-compose exec api node reset-test-data.js
                    
                    if [[ $? -eq 0 ]]; then
                        echo -e "${GREEN}‚úÖ Reset complet termin√© ! Nouvelles donn√©es de test cr√©√©es.${NC}"
                        echo -e "${CYAN}üí° Connectez-vous avec: admin@admin.fr / admin${NC}"
                    else
                        echo -e "${RED}‚ùå Erreur lors du reset des donn√©es${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Le container API n'est pas en cours d'ex√©cution${NC}"
                    echo "üí° D√©marrez d'abord l'environnement avec l'option 1 ou 3"
                fi
            else
                echo -e "${YELLOW}Reset complet annul√© (bonne d√©cision !)${NC}"
            fi
            ;;
        0|*)
            echo -e "${YELLOW}Reset annul√©${NC}"
            ;;
    esac
    pause
}
