#!/bin/bash

# Module de monitoring et logs pour SUPCHAT Docker Manager
# Auteur: SUPCHAT Team

# Fonction pour voir les logs d'un service
view_logs() {
    compose_file=$(select_environment)
    result=$?
    
    if [[ $result -eq 1 ]]; then
        if [[ "$compose_file" == "NONE" ]]; then
            echo -e "\n${RED}‚ùå Aucun environnement Docker n'est en cours d'ex√©cution${NC}"
        else
            echo -e "${RED}‚ùå Choix d'environnement invalide${NC}"
        fi
        pause
        return 1
    fi
    
    env_name=$(get_env_name "$compose_file")
    service=$(select_service "üìù CONSULTATION DES LOGS - S√©lectionnez le service dont vous voulez voir les logs dans l'environnement ${env_name}")
    
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üìù Logs du service: $service (${env_name})${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo -e "${CYAN}Affichage des 50 derni√®res lignes de logs...${NC}"
        if eval "docker-compose $compose_file logs --tail=50 $service"; then
            echo -e "\n${GREEN}‚úÖ Logs affich√©s avec succ√®s${NC}"
        else
            echo -e "\n${RED}‚ùå Erreur lors de l'affichage des logs pour le service $service${NC}"
        fi
    else
        echo -e "\n${RED}‚ùå ERREUR: Aucun service s√©lectionn√© ou choix invalide${NC}"
        echo -e "${YELLOW}üí° AIDE - Comment bien choisir un service:${NC}"
        echo -e "   ‚Ä¢ Regardez la liste des services num√©rot√©s ci-dessus"
        echo -e "   ‚Ä¢ Entrez uniquement le NUM√âRO (1, 2, 3, 4 ou 5)"
        echo -e "   ‚Ä¢ Ne tapez pas le nom du service, juste son num√©ro"
        echo -e "   ‚Ä¢ Exemple: tapez '2' pour voir les logs de l'API"
    fi
    pause
}

# Fonction pour voir les logs d'un service en production (pour les menus post-d√©marrage)
view_logs_prod() {
    service=$(select_service "üìù CONSULTATION DES LOGS PRODUCTION - S√©lectionnez le service dont vous voulez voir les logs en production")
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üìù Logs du service: $service (production)${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo -e "${CYAN}Affichage des 50 derni√®res lignes de logs...${NC}"
        if docker-compose -f docker-compose.prod.yml logs --tail=50 "$service"; then
            echo -e "\n${GREEN}‚úÖ Logs affich√©s avec succ√®s${NC}"
        else
            echo -e "\n${RED}‚ùå Erreur lors de l'affichage des logs pour le service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide.${NC}"
    fi
    pause
}

# Fonction pour suivre les logs en temps r√©el
follow_logs() {
    compose_file=$(select_environment)
    result=$?
    
    if [[ $result -eq 1 ]]; then
        if [[ "$compose_file" == "NONE" ]]; then
            echo -e "\n${RED}‚ùå Aucun environnement Docker n'est en cours d'ex√©cution${NC}"
        else
            echo -e "${RED}‚ùå Choix d'environnement invalide${NC}"
        fi
        pause
        return 1
    fi
    
    env_name=$(get_env_name "$compose_file")
    service=$(select_service "üìà SUIVI DES LOGS EN TEMPS R√âEL - S√©lectionnez le service dont vous voulez suivre les logs dans l'environnement ${env_name}")
    
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üìà Logs en temps r√©el du service: $service (${env_name})${NC}"
        echo -e "${CYAN}Appuyez sur Ctrl+C pour arr√™ter${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        if eval "docker-compose $compose_file logs -f $service"; then
            echo -e "\n${GREEN}‚úÖ Suivi des logs termin√©${NC}"
        else
            echo -e "\n${RED}‚ùå Erreur lors du suivi des logs pour le service $service${NC}"
        fi
    else
        echo -e "\n${RED}‚ùå ERREUR: Aucun service s√©lectionn√© ou choix invalide${NC}"
        echo -e "${YELLOW}üí° AIDE - Comment bien choisir un service:${NC}"
        echo -e "   ‚Ä¢ Regardez la liste des services num√©rot√©s ci-dessus"
        echo -e "   ‚Ä¢ Entrez uniquement le NUM√âRO (1, 2, 3, 4 ou 5)"
        echo -e "   ‚Ä¢ Ne tapez pas le nom du service, juste son num√©ro"
        echo -e "   ‚Ä¢ Exemple: tapez '1' pour suivre les logs du service Web"
    fi
    pause
}

# Fonction pour ouvrir un shell dans un container
open_shell() {
    compose_file=$(select_environment)
    result=$?
    
    if [[ $result -eq 1 ]]; then
        if [[ "$compose_file" == "NONE" ]]; then
            echo -e "\n${RED}‚ùå Aucun environnement Docker n'est en cours d'ex√©cution${NC}"
        else
            echo -e "${RED}‚ùå Choix d'environnement invalide${NC}"
        fi
        pause
        return 1
    fi
    
    env_name=$(get_env_name "$compose_file")
    service=$(select_service "üñ•Ô∏è ACC√àS SHELL CONTAINER - S√©lectionnez le container dans lequel vous voulez ouvrir un shell dans l'environnement ${env_name}")
    
    if [[ -n "$service" ]]; then
        echo -e "\n${CYAN}üñ•Ô∏è Ouverture d'un shell dans: $service (${env_name})${NC}"
        
        # V√©rifier si le container est en cours d'ex√©cution
        if eval "docker-compose $compose_file ps $service" | grep -q "Up"; then
            case "$service" in
                "web"|"api"|"mobile")
                    eval "docker-compose $compose_file exec $service /bin/sh"
                    ;;
                "db")
                    echo "Choix disponibles:"
                    echo "  1) Shell bash/sh"
                    echo "  2) MongoDB shell (mongosh)"
                    read -p "Votre choix (1-2): " shell_choice
                    if [[ "$shell_choice" == "1" ]]; then
                        eval "docker-compose $compose_file exec $service /bin/bash"
                    elif [[ "$shell_choice" == "2" ]]; then
                        eval "docker-compose $compose_file exec $service mongosh"
                    fi
                    ;;
                *)
                    eval "docker-compose $compose_file exec $service /bin/sh"
                    ;;
            esac
        else
            echo -e "${RED}‚ùå Le container $service n'est pas en cours d'ex√©cution${NC}"
            pause
        fi
    else
        echo -e "\n${RED}‚ùå ERREUR: Aucun service s√©lectionn√© ou choix invalide${NC}"
        echo -e "${YELLOW}üí° AIDE - Comment bien choisir un service:${NC}"
        echo -e "   ‚Ä¢ Regardez la liste des services num√©rot√©s ci-dessus"
        echo -e "   ‚Ä¢ Entrez uniquement le NUM√âRO (1, 2, 3, 4 ou 5)"
        echo -e "   ‚Ä¢ Ne tapez pas le nom du service, juste son num√©ro"
        echo -e "   ‚Ä¢ Exemple: tapez '2' pour acc√©der au shell de l'API"
        pause
    fi
}

# Fonction pour voir l'utilisation des ressources
show_resources() {
    echo -e "\n${BLUE}üì¶ Utilisation des ressources Docker:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${CYAN}üíæ Utilisation du disque:${NC}"
    docker system df
    
    echo -e "\n${CYAN}üñ•Ô∏è Ressources des containers:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
    
    pause
}

# Fonction de diagnostic des services
diagnostic_services() {
    echo -e "\n${BLUE}üîç Diagnostic des services Docker...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${CYAN}üìã Services configur√©s dans le script:${NC}"
    for i in "${!SERVICES[@]}"; do
        echo "  $((i+1))) ${SERVICES[$i]}"
    done
    
    echo -e "\n${CYAN}üê≥ √âtat d√©taill√© des containers (d√©veloppement):${NC}"
    docker-compose ps -a 2>/dev/null || echo "Aucun container de d√©veloppement"
    
    echo -e "\n${CYAN}üè≠ √âtat d√©taill√© des containers (production):${NC}"
    docker-compose -f docker-compose.prod.yml ps -a 2>/dev/null || echo "Aucun container de production"
    
    echo -e "\n${CYAN}üß™ √âtat d√©taill√© des containers (test):${NC}"
    docker-compose -f docker-compose.test.yml ps -a 2>/dev/null || echo "Aucun container de test"
    
    echo -e "\n${CYAN}üîó Services dans docker-compose.yml:${NC}"
    docker-compose config --services 2>/dev/null || echo "Erreur lors de la lecture de docker-compose.yml"
    
    echo -e "\n${CYAN}üìä Test de connectivit√© aux services:${NC}"
    for service in "${SERVICES[@]}"; do
        echo -n "  ‚Ä¢ $service: "
        if docker-compose ps "$service" 2>/dev/null | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ En fonctionnement (dev)${NC}"
        elif docker-compose -f docker-compose.prod.yml ps "$service" 2>/dev/null | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ En fonctionnement (prod)${NC}"
        elif docker-compose -f docker-compose.test.yml ps "$service" 2>/dev/null | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ En fonctionnement (test)${NC}"
        else
            echo -e "${RED}‚ùå Arr√™t√© ou non trouv√©${NC}"
        fi
    done
    
    echo -e "\n${CYAN}üîß Informations de debugging:${NC}"
    echo "  ‚Ä¢ Docker version: $(docker --version 2>/dev/null || echo 'Non disponible')"
    echo "  ‚Ä¢ Docker Compose version: $(docker-compose --version 2>/dev/null || echo 'Non disponible')"
    echo "  ‚Ä¢ R√©pertoire courant: $(pwd)"
    echo "  ‚Ä¢ Fichiers docker-compose disponibles:"
    ls -la docker-compose*.yml 2>/dev/null | sed 's/^/    /' || echo "    Aucun fichier docker-compose trouv√©"
    
    pause
}
