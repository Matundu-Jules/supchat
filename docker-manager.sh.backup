#!/bin/bash

# Script de gestion Docker pour SUPCHAT
# Auteur: SUPCHAT Team
# Version: 1.0

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Variables
PROJECT_NAME="supchat"
SERVICES=("web" "api" "mobile" "db" "cadvisor")

# Fonction pour afficher le header
show_header() {
    clear
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üöÄ SUPCHAT DOCKER MANAGER                ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë              Gestion compl√®te de l'environnement Docker     ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fonction pour afficher l'√©tat des containers
show_status() {
    echo -e "\n${BLUE}üìä √âtat actuel des containers:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    if docker-compose ps 2>/dev/null | grep -q "supchat"; then
        docker-compose ps
    else
        echo -e "${YELLOW}Aucun container en cours d'ex√©cution${NC}"
    fi
    echo ""
}

# Fonction pour afficher le menu principal
show_menu() {
    echo -e "${WHITE}ENVIRONNEMENTS COMPLETS (avec build):${NC}"
    echo -e "${GREEN}  1)${NC} üöÄ Lancer TOUT en D√âVELOPPEMENT (hot reload + build)"
    echo -e "${PURPLE}  2)${NC} üè≠ Lancer TOUT en PRODUCTION (optimis√© + build)"
    echo ""
    echo -e "${WHITE}D√âMARRAGE RAPIDE (containers existants):${NC}"
    echo -e "${CYAN} 20)${NC} ‚ö° D√©marrage RAPIDE D√©veloppement (sans rebuild)"
    echo -e "${CYAN} 21)${NC} ‚ö° D√©marrage RAPIDE Production (sans rebuild)"
    echo -e "${CYAN} 22)${NC} ‚ö° D√©marrage RAPIDE Tests (sans rebuild)"
    echo ""
    echo -e "${WHITE}GESTION DES SERVICES:${NC}"
    echo -e "${CYAN}  3)${NC} üîß D√©marrer un service sp√©cifique"
    echo -e "${CYAN}  4)${NC} ‚èπÔ∏è  Arr√™ter un service sp√©cifique"
    echo -e "${CYAN}  5)${NC} üîÑ Red√©marrer un service sp√©cifique"
    echo -e "${CYAN}  6)${NC} üèóÔ∏è  Builder/Rebuilder un service"
    echo ""
    echo -e "${WHITE}MONITORING & LOGS:${NC}"
    echo -e "${YELLOW}  7)${NC} üìä Voir l'√©tat des containers"
    echo -e "${YELLOW}  8)${NC} üìù Voir les logs d'un service"
    echo -e "${YELLOW}  9)${NC} üìà Suivre les logs en temps r√©el"
    echo -e "${YELLOW} 10)${NC} üñ•Ô∏è  Ouvrir un shell dans un container"
    echo -e "${YELLOW} 11)${NC} üñ•Ô∏è  Ouvrir terminaux de logs VS Code"
    echo ""
    echo -e "${WHITE}MAINTENANCE:${NC}"
    echo -e "${RED} 12)${NC} üõë Arr√™ter TOUS les services"
    echo -e "${RED} 13)${NC} üßπ Options de nettoyage (soft/complet)"
    echo -e "${RED} 14)${NC} üîÑ Restart complet (stop + build + start)"
    echo ""
    echo -e "${WHITE}UTILITAIRES:${NC}"
    echo -e "${BLUE} 15)${NC} üíæ Backup de la base de donn√©es"
    echo -e "${BLUE} 16)${NC} üì¶ Voir l'utilisation des ressources"
    echo -e "${BLUE} 17)${NC} üåê Ouvrir les URLs de l'application"
    echo -e "${BLUE} 18)${NC} üîç Diagnostic des services (debug)"
    echo -e "${GREEN} 19)${NC} üß™ Lancer les tests automatis√©s"
    echo ""
    echo -e "${WHITE} 0)${NC} ‚ùå Quitter"
    echo ""
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# Fonction pour s√©lectionner un service
select_service() {
    local prompt="$1"
    echo -e "\n${CYAN}$prompt${NC}" >&2
    echo "Services disponibles:" >&2
    for i in "${!SERVICES[@]}"; do
        echo "  $((i+1))) ${SERVICES[$i]}" >&2
    done
    echo "" >&2
    read -p "S√©lectionnez un service (num√©ro): " service_choice
    
    # V√©rifier si l'entr√©e est un nombre valide
    if [[ "$service_choice" =~ ^[0-9]+$ ]] && [[ $service_choice -ge 1 && $service_choice -le ${#SERVICES[@]} ]]; then
        echo "${SERVICES[$((service_choice-1))]}"
    else
        echo ""
    fi
}



# Fonction pour lancer automatiquement les t√¢ches VS Code de logs
launch_vscode_logs_task() {
    local environment="$1"
    local task_name=""
    
    if [[ "$environment" == "d√©veloppement" ]]; then
        task_name="üöÄ Ouvrir TOUS les Logs (D√©veloppement)"
    else
        task_name="üè≠ Ouvrir TOUS les Logs (Production)"
    fi
    
    echo -e "\n${CYAN}üöÄ Tentative de lancement automatique de la t√¢che VS Code...${NC}"
    
    # V√©rifier si la commande 'code' est disponible
    if command -v code &> /dev/null; then
        echo -e "${GREEN}‚úÖ VS Code CLI d√©tect√© !${NC}"
        
        # V√©rifier si VS Code est d√©j√† ouvert dans ce workspace
        local workspace_path="$(pwd)"
        
        # M√©thode 1: Essayer de lancer la t√¢che directement
        echo -e "${YELLOW}üéØ Tentative de lancement direct de la t√¢che...${NC}"
        
        # Utiliser une approche JSON pour d√©clencher la t√¢che
        local temp_script="/tmp/launch_vscode_task.sh"
        cat > "$temp_script" << EOF
#!/bin/bash
# Script temporaire pour lancer la t√¢che VS Code
echo "Lancement de la t√¢che VS Code: $task_name"
cd "$workspace_path"
code --command "workbench.action.tasks.runTask" --args "$task_name" . 2>/dev/null &
sleep 2
exit 0
EOF
        
        chmod +x "$temp_script"
        
        if "$temp_script" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Commande lanc√©e !${NC}"
            echo -e "${CYAN}‚û°Ô∏è  Si VS Code est ouvert, la t√¢che '${task_name}' devrait se lancer automatiquement${NC}"
            echo -e "${YELLOW}üìù Sinon, utilisez Ctrl+Shift+P dans VS Code et tapez le nom de la t√¢che${NC}"
            rm -f "$temp_script" 2>/dev/null
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Lancement direct √©chou√©, ouverture de VS Code...${NC}"
            rm -f "$temp_script" 2>/dev/null
        fi
        
        # M√©thode 2: Ouvrir VS Code dans le workspace
        echo -e "${YELLOW}üìÇ Ouverture de VS Code dans le workspace...${NC}"
        
        if code "$workspace_path" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ VS Code ouvert avec succ√®s !${NC}"
            echo -e "${CYAN}‚û°Ô∏è  Dans VS Code:${NC}"
            echo -e "   1. Appuyez sur ${WHITE}Ctrl+Shift+P${NC}"
            echo -e "   2. Tapez: ${YELLOW}${task_name}${NC}"
            echo -e "   3. Appuyez sur ${WHITE}Entr√©e${NC}"
            echo -e "${GREEN}üéâ Tous les logs s'ouvriront automatiquement !${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Erreur lors de l'ouverture de VS Code${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå VS Code CLI ('code') non trouv√© dans le PATH${NC}"
        echo -e "${YELLOW}üí° Pour installer VS Code CLI:${NC}"
        echo -e "   1. Ouvrez VS Code"
        echo -e "   2. ${WHITE}Ctrl+Shift+P${NC} ‚Üí tapez: ${CYAN}Shell Command: Install 'code' command in PATH${NC}"
        echo -e "   3. Red√©marrez votre terminal"
        echo -e "   4. Relancez ce script"
        return 1
    fi
}

# Fonction pour afficher les instructions manuelles de logs
show_manual_logs_instructions() {
    local environment="$1"
    
    echo -e "\n${CYAN}üñ•Ô∏è Instructions manuelles pour logs en temps r√©el (${environment}):${NC}"
    echo -e "${GREEN}üìã OPTION RECOMMAND√âE - T√¢ches VS Code manuelles:${NC}"
    echo ""
    echo -e "${WHITE}Dans VS Code:${NC}"
    echo -e "1. Appuyez sur ${GREEN}Ctrl+Shift+P${NC}"
    echo -e "2. Tapez: ${CYAN}Tasks: Run Task${NC}"
    
    if [[ "$environment" == "d√©veloppement" ]]; then
        echo -e "3. S√©lectionnez: ${YELLOW}üöÄ Ouvrir TOUS les Logs (D√©veloppement)${NC}"
        echo -e "4. ${GREEN}‚úÖ TERMIN√â !${NC} Tous les logs s'ouvrent automatiquement dans des terminaux s√©par√©s"
        echo ""
        echo -e "${BLUE}üìã OU commandes manuelles √† copier-coller:${NC}"
        echo -e "${WHITE}# API Backend (${environment}):${NC}"
        echo -e "${CYAN}docker-compose logs -f api${NC}"
        echo ""
        echo -e "${WHITE}# Web Frontend (${environment}):${NC}"
        echo -e "${CYAN}docker-compose logs -f web${NC}"
        echo ""
        echo -e "${WHITE}# MongoDB Database (${environment}):${NC}"
        echo -e "${CYAN}docker-compose logs -f db${NC}"
        echo ""
        echo -e "${WHITE}# cAdvisor Monitoring (${environment}):${NC}"
        echo -e "${CYAN}docker-compose logs -f cadvisor${NC}"
        
        # Si c'est l'environnement de d√©veloppement et que mobile existe
        if docker-compose ps mobile 2>/dev/null | grep -q "Up"; then
            echo ""
            echo -e "${WHITE}# Mobile App (${environment}):${NC}"
            echo -e "${CYAN}docker-compose logs -f mobile${NC}"
        fi
    else
        echo -e "3. S√©lectionnez: ${YELLOW}üè≠ Ouvrir TOUS les Logs (Production)${NC}"
        echo -e "4. ${GREEN}‚úÖ TERMIN√â !${NC} Tous les logs s'ouvrent automatiquement dans des terminaux s√©par√©s"
        echo ""
        echo -e "${BLUE}üìã OU commandes manuelles √† copier-coller:${NC}"
        echo -e "${WHITE}# API Backend (${environment}):${NC}"
        echo -e "${CYAN}docker-compose -f docker-compose.prod.yml logs -f api${NC}"
        echo ""
        echo -e "${WHITE}# Web Frontend (${environment}):${NC}"
        echo -e "${CYAN}docker-compose -f docker-compose.prod.yml logs -f web${NC}"
        echo ""
        echo -e "${WHITE}# MongoDB Database (${environment}):${NC}"
        echo -e "${CYAN}docker-compose -f docker-compose.prod.yml logs -f db${NC}"
        echo ""
        echo -e "${WHITE}# cAdvisor Monitoring (${environment}):${NC}"
        echo -e "${CYAN}docker-compose -f docker-compose.prod.yml logs -f cadvisor${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}üîß Instructions pour ouvrir des terminaux VS Code:${NC}"
    echo -e "${WHITE}Si Ctrl+Shift+\` ne fonctionne pas, essayez ces alternatives:${NC}"
    echo -e "1. ${GREEN}Menu Terminal${NC} ‚Üí Nouveau Terminal"
    echo -e "2. ${GREEN}Ctrl+Shift+P${NC} ‚Üí tapez 'terminal new' ‚Üí Entr√©e"
    echo -e "3. ${GREEN}Bouton +${NC} dans le panneau terminal (en bas)"
    echo -e "4. ${GREEN}Ctrl+Shift+√π${NC} (sur clavier fran√ßais)"
    echo ""
    echo -e "${CYAN}üéØ Pour chaque service:${NC}"
    echo -e "‚Ä¢ Ouvrez un nouveau terminal (m√©thode au choix ci-dessus)"
    echo -e "‚Ä¢ Copiez-collez la commande du service"
    echo -e "‚Ä¢ R√©p√©tez pour le service suivant"
    echo -e "‚Ä¢ Utilisez ${WHITE}Ctrl+C${NC} pour arr√™ter les logs"
    echo ""
    echo -e "${GREEN}üí° Astuce: Renommez vos terminaux (clic droit ‚Üí Rename) avec le nom du service${NC}"
}

# Fonction pour afficher les instructions pour consulter les logs
show_logs_info() {
    local environment="$1"
    echo -e "\n${CYAN}ÔøΩ Pour consulter les logs en ${environment}:${NC}"
    echo -e "${WHITE}‚Ä¢ Utilisez les t√¢ches VS Code dans VS Code > Terminal > Run Task${NC}"
    echo -e "${GREEN}  - 'Open All Logs (Dev)' pour d√©veloppement${NC}"
    echo -e "${GREEN}  - 'Open All Logs (Prod)' pour production${NC}"
    echo -e "${WHITE}‚Ä¢ Ou utilisez le menu option 11 du script Docker Manager${NC}"
}

# Fonction pour lancer l'environnement de d√©veloppement
start_development() {
    echo -e "\n${GREEN}üöÄ D√©marrage de l'environnement de D√âVELOPPEMENT...${NC}"
    echo -e "${YELLOW}Mode: Hot reload activ√© pour tous les services${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${BLUE}Building images de d√©veloppement...${NC}"
    docker-compose build --no-cache
    
    echo -e "\n${BLUE}D√©marrage des services...${NC}"
    docker-compose up -d
    
    echo -e "\n${GREEN}‚úÖ Environnement de d√©veloppement d√©marr√© !${NC}"
    echo -e "${CYAN}üìç URLs disponibles:${NC}"
    echo "   ‚Ä¢ Web (Frontend): http://localhost:80"
    echo "   ‚Ä¢ API (Backend): http://localhost:3000"
    echo "   ‚Ä¢ MongoDB: localhost:27017"
    echo "   ‚Ä¢ cAdvisor (Monitoring): http://localhost:8080"
    
    # Afficher les informations sur les logs
    show_logs_info "d√©veloppement"
    
    # Menu post-d√©marrage
    while true; do
        echo ""
        echo -e "${WHITE}üéØ Services de d√©veloppement d√©marr√©s - Que voulez-vous faire ?${NC}"
        echo -e "${GREEN}  1)${NC} üìä Voir l'√©tat des services"
        echo -e "${GREEN}  2)${NC} üìù Voir les logs d'un service"
        echo -e "${GREEN}  3)${NC} üñ•Ô∏è  Ouvrir les terminaux de logs VS Code"
        echo -e "${GREEN}  4)${NC} üåê Ouvrir les URLs de l'application"
        echo -e "${YELLOW}  5)${NC} üîÑ Red√©marrer un service"
        echo -e "${RED}  6)${NC} üõë Arr√™ter TOUS les services de d√©veloppement"
        echo -e "${BLUE}  0)${NC} ‚¨ÖÔ∏è  Retour au menu principal"
        echo ""
        read -p "Votre choix: " post_choice
        
        case $post_choice in
            1)
                echo -e "\n${BLUE}üìä √âtat des services de d√©veloppement:${NC}"
                docker-compose ps
                pause
                ;;
            2)
                view_logs
                ;;
            3)
                # Rediriger vers le menu des logs VS Code (option 11)
                open_logs_terminals_menu
                ;;
            4)
                open_urls
                ;;
            5)
                restart_service
                ;;
            6)
                echo -e "\n${RED}üõë Arr√™t des services de d√©veloppement...${NC}"
                docker-compose down
                echo -e "${GREEN}‚úÖ Services de d√©veloppement arr√™t√©s !${NC}"
                pause
                return
                ;;
            0)
                echo -e "${BLUE}Retour au menu principal...${NC}"
                return
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide. Veuillez r√©essayer.${NC}"
                ;;
        esac
    done
}

# Fonction pour lancer l'environnement de production
start_production() {
    echo -e "\n${PURPLE}üè≠ D√©marrage de l'environnement de PRODUCTION...${NC}"
    echo -e "${YELLOW}Mode: Images optimis√©es + Health checks${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${BLUE}Building images de production...${NC}"
    docker-compose -f docker-compose.prod.yml build --no-cache
    
    echo -e "\n${BLUE}D√©marrage des services...${NC}"
    docker-compose -f docker-compose.prod.yml up -d
    
    echo -e "\n${GREEN}‚úÖ Environnement de production d√©marr√© !${NC}"
    echo -e "${CYAN}üìç URLs disponibles:${NC}"
    echo "   ‚Ä¢ Web (Frontend): http://localhost:80"
    echo "   ‚Ä¢ API (Backend): http://localhost:3000"
    echo "   ‚Ä¢ MongoDB: localhost:27017"
    echo "   ‚Ä¢ cAdvisor (Monitoring): http://localhost:8080"
    
    # Afficher les informations sur les logs
    show_logs_info "production"
    
    # Menu post-d√©marrage
    while true; do
        echo ""
        echo -e "${WHITE}üéØ Services de production d√©marr√©s - Que voulez-vous faire ?${NC}"
        echo -e "${GREEN}  1)${NC} üìä Voir l'√©tat des services"
        echo -e "${GREEN}  2)${NC} üìù Voir les logs d'un service"
        echo -e "${GREEN}  3)${NC} üñ•Ô∏è  Ouvrir les terminaux de logs VS Code"
        echo -e "${GREEN}  4)${NC} üåê Ouvrir les URLs de l'application"
        echo -e "${GREEN}  5)${NC} üì¶ Voir l'utilisation des ressources"
        echo -e "${YELLOW}  6)${NC} üîÑ Red√©marrer un service"
        echo -e "${YELLOW}  7)${NC} üíæ Backup de la base de donn√©es"
        echo -e "${RED}  8)${NC} üõë Arr√™ter TOUS les services de production"
        echo -e "${BLUE}  0)${NC} ‚¨ÖÔ∏è  Retour au menu principal"
        echo ""
        read -p "Votre choix: " post_choice
        
        case $post_choice in
            1)
                echo -e "\n${BLUE}üìä √âtat des services de production:${NC}"
                docker-compose -f docker-compose.prod.yml ps
                pause
                ;;
            2)
                # Adapter view_logs pour la production
                service=$(select_service "De quel service voulez-vous voir les logs (production) ?")
                if [[ -n "$service" ]]; then
                    echo -e "\n${YELLOW}üìù Logs du service: $service (production)${NC}"
                    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    echo -e "${CYAN}Affichage des 50 derni√®res lignes de logs...${NC}"
                    if docker-compose -f docker-compose.prod.yml logs --tail=50 "$service"; then
                        echo -e "\n${GREEN}‚úÖ Logs affich√©s avec succ√®s${NC}"
                    else
                        echo -e "\n${RED}‚ùå Erreur lors de l'affichage des logs pour le service $service${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Service invalide.${NC}"
                fi
                pause
                ;;
            3)
                # Rediriger vers le menu des logs VS Code (option 11)
                open_logs_terminals_menu
                ;;
            4)
                open_urls
                ;;
            5)
                show_resources
                ;;
            6)
                # Adapter restart_service pour la production
                service=$(select_service "Quel service voulez-vous red√©marrer (production) ?")
                if [[ -n "$service" ]]; then
                    echo -e "\n${YELLOW}üîÑ Red√©marrage du service: $service (production)${NC}"
                    if docker-compose -f docker-compose.prod.yml restart "$service"; then
                        echo -e "${GREEN}‚úÖ Service $service red√©marr√© !${NC}"
                    else
                        echo -e "${RED}‚ùå Erreur lors du red√©marrage du service $service${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Service invalide.${NC}"
                fi
                pause
                ;;
            7)
                # Adapter backup pour la production
                echo -e "\n${BLUE}üíæ Backup de la base de donn√©es MongoDB (production)...${NC}"
                if docker-compose -f docker-compose.prod.yml ps db | grep -q "Up"; then
                    backup_dir="./backups"
                    mkdir -p "$backup_dir"
                    
                    timestamp=$(date +"%Y%m%d_%H%M%S")
                    backup_file="$backup_dir/mongodb_backup_prod_$timestamp"
                    
                    echo "üì¶ Cr√©ation du backup..."
                    docker-compose -f docker-compose.prod.yml exec -T db mongodump --out /tmp/backup
                    docker-compose -f docker-compose.prod.yml exec -T db tar -czf "/tmp/backup_$timestamp.tar.gz" -C /tmp backup
                    docker cp "$(docker-compose -f docker-compose.prod.yml ps -q db):/tmp/backup_$timestamp.tar.gz" "$backup_file.tar.gz"
                    
                    echo -e "${GREEN}‚úÖ Backup cr√©√©: $backup_file.tar.gz${NC}"
                else
                    echo -e "${RED}‚ùå Le container de base de donn√©es n'est pas en cours d'ex√©cution${NC}"
                fi
                pause
                ;;
            8)
                echo -e "\n${RED}üõë Arr√™t des services de production...${NC}"
                docker-compose -f docker-compose.prod.yml down
                echo -e "${GREEN}‚úÖ Services de production arr√™t√©s !${NC}"
                pause
                return
                ;;
            0)
                echo -e "${BLUE}Retour au menu principal...${NC}"
                return
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide. Veuillez r√©essayer.${NC}"
                ;;
        esac
    done
}

# Menu post-d√©marrage pour l'environnement de d√©veloppement
post_start_menu() {
    local env_name="$1"
    
    while true; do
        echo ""
        echo -e "${WHITE}üéØ Services de ${env_name} d√©marr√©s - Que voulez-vous faire ?${NC}"
        echo -e "${GREEN}  1)${NC} üìä Voir l'√©tat des services"
        echo -e "${GREEN}  2)${NC} üìù Voir les logs d'un service"
        echo -e "${GREEN}  3)${NC} üñ•Ô∏è  Ouvrir les terminaux de logs VS Code"
        echo -e "${GREEN}  4)${NC} üåê Ouvrir les URLs de l'application"
        echo -e "${YELLOW}  5)${NC} üîÑ Red√©marrer un service"
        echo -e "${RED}  6)${NC} üõë Arr√™ter TOUS les services de ${env_name}"
        echo -e "${BLUE}  0)${NC} ‚¨ÖÔ∏è  Retour au menu principal"
        echo ""
        read -p "Votre choix: " post_choice
        
        case $post_choice in
            1)
                echo -e "\n${BLUE}üìä √âtat des services de ${env_name}:${NC}"
                docker-compose ps
                pause
                ;;
            2)
                view_logs
                ;;
            3)
                # Rediriger vers le menu des logs VS Code (option 11)
                open_logs_terminals_menu
                ;;
            4)
                open_urls
                ;;
            5)
                restart_service
                ;;
            6)
                echo -e "\n${RED}üõë Arr√™t des services de ${env_name}...${NC}"
                docker-compose down
                echo -e "${GREEN}‚úÖ Services de ${env_name} arr√™t√©s !${NC}"
                pause
                return
                ;;
            0)
                echo -e "${BLUE}Retour au menu principal...${NC}"
                return
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide. Veuillez r√©essayer.${NC}"
                ;;
        esac
    done
}

# Menu post-d√©marrage pour l'environnement de production
post_start_menu_prod() {
    local env_name="$1"
    
    while true; do
        echo ""
        echo -e "${WHITE}üè≠ Services de ${env_name} d√©marr√©s - Que voulez-vous faire ?${NC}"
        echo -e "${GREEN}  1)${NC} üìä Voir l'√©tat des services"
        echo -e "${GREEN}  2)${NC} üìù Voir les logs d'un service"
        echo -e "${GREEN}  3)${NC} üñ•Ô∏è  Ouvrir les terminaux de logs VS Code"
        echo -e "${GREEN}  4)${NC} üåê Ouvrir les URLs de l'application"
        echo -e "${GREEN}  5)${NC} üìä Monitorer les ressources"
        echo -e "${YELLOW}  6)${NC} üîÑ Red√©marrer un service"
        echo -e "${YELLOW}  7)${NC} üíæ Backup base de donn√©es"
        echo -e "${RED}  8)${NC} üõë Arr√™ter TOUS les services de ${env_name}"
        echo -e "${BLUE}  0)${NC} ‚¨ÖÔ∏è  Retour au menu principal"
        echo ""
        read -p "Votre choix: " post_choice
        
        case $post_choice in
            1)
                echo -e "\n${BLUE}üìä √âtat des services de ${env_name}:${NC}"
                docker-compose -f docker-compose.prod.yml ps
                pause
                ;;
            2)
                # Adapter view_logs pour la production
                service=$(select_service "Pour quel service voulez-vous voir les logs (production) ?")
                if [[ -n "$service" ]]; then
                    echo -e "\n${CYAN}üìã Logs du service: $service (production)${NC}"
                    echo -e "${CYAN}Affichage des 50 derni√®res lignes de logs...${NC}"
                    if docker-compose -f docker-compose.prod.yml logs --tail=50 "$service"; then
                        echo -e "\n${GREEN}‚úÖ Logs affich√©s avec succ√®s${NC}"
                    else
                        echo -e "\n${RED}‚ùå Erreur lors de l'affichage des logs pour le service $service${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Service invalide.${NC}"
                fi
                pause
                ;;
            3)
                # Rediriger vers le menu des logs VS Code (option 11)
                open_logs_terminals_menu
                ;;
            4)
                open_urls
                ;;
            5)
                show_resources
                ;;
            6)
                # Adapter restart_service pour la production
                service=$(select_service "Quel service voulez-vous red√©marrer (production) ?")
                if [[ -n "$service" ]]; then
                    echo -e "\n${YELLOW}üîÑ Red√©marrage du service: $service (production)${NC}"
                    if docker-compose -f docker-compose.prod.yml restart "$service"; then
                        echo -e "${GREEN}‚úÖ Service $service red√©marr√© !${NC}"
                    else
                        echo -e "${RED}‚ùå Erreur lors du red√©marrage du service $service${NC}"
                    fi
                else
                    echo -e "${RED}‚ùå Service invalide.${NC}"
                fi
                pause
                ;;
            7)
                # Adapter backup pour la production
                echo -e "\n${BLUE}üíæ Backup de la base de donn√©es MongoDB (production)...${NC}"
                if docker-compose -f docker-compose.prod.yml ps db | grep -q "Up"; then
                    backup_dir="./backups"
                    mkdir -p "$backup_dir"
                    
                    timestamp=$(date +"%Y%m%d_%H%M%S")
                    backup_file="$backup_dir/mongodb_backup_prod_$timestamp"
                    
                    echo "üì¶ Cr√©ation du backup..."
                    docker-compose -f docker-compose.prod.yml exec -T db mongodump --out /tmp/backup
                    docker-compose -f docker-compose.prod.yml exec -T db tar -czf "/tmp/backup_$timestamp.tar.gz" -C /tmp backup
                    docker cp "$(docker-compose -f docker-compose.prod.yml ps -q db):/tmp/backup_$timestamp.tar.gz" "$backup_file.tar.gz"
                    
                    echo -e "${GREEN}‚úÖ Backup cr√©√©: $backup_file.tar.gz${NC}"
                else
                    echo -e "${RED}‚ùå Le container de base de donn√©es n'est pas en cours d'ex√©cution${NC}"
                fi
                pause
                ;;
            8)
                echo -e "\n${RED}üõë Arr√™t des services de ${env_name}...${NC}"
                docker-compose -f docker-compose.prod.yml down
                echo -e "${GREEN}‚úÖ Services de ${env_name} arr√™t√©s !${NC}"
                pause
                return
                ;;
            0)
                echo -e "${BLUE}Retour au menu principal...${NC}"
                return
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide. Veuillez r√©essayer.${NC}"
                ;;
        esac
    done
}

# Fonction pour d√©marrage rapide d√©veloppement (sans rebuild)
quick_start_development() {
    echo -e "\n${CYAN}‚ö° D√âMARRAGE RAPIDE - Environnement de d√©veloppement${NC}"
    echo -e "${YELLOW}Mode: Containers existants (aucun rebuild)${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${BLUE}üöÄ D√©marrage des containers...${NC}"
    if docker-compose up -d; then
        echo -e "${GREEN}‚úÖ Environnement de d√©veloppement d√©marr√© rapidement !${NC}"
        
        echo -e "\n${CYAN}üìã √âtat des services:${NC}"
        docker-compose ps
        
        echo -e "\n${CYAN}üåê Applications disponibles:${NC}"
        echo "   ‚Ä¢ Frontend Web: http://localhost:80"
        echo "   ‚Ä¢ API Backend: http://localhost:3000"
        echo "   ‚Ä¢ MongoDB: mongodb://localhost:27017"
        
        # Menu post-d√©marrage
        post_start_menu "d√©veloppement"
    else
        echo -e "${RED}‚ùå Erreur lors du d√©marrage rapide${NC}"
        echo -e "${YELLOW}üí° Conseil: Utilisez l'option 1 (d√©marrage complet) si les images n'existent pas${NC}"
        pause
    fi
}

# Fonction pour d√©marrage rapide production (sans rebuild)
quick_start_production() {
    echo -e "\n${PURPLE}‚ö° D√âMARRAGE RAPIDE - Environnement de production${NC}"
    echo -e "${YELLOW}Mode: Containers existants (aucun rebuild)${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${BLUE}üöÄ D√©marrage des containers de production...${NC}"
    if docker-compose -f docker-compose.prod.yml up -d; then
        echo -e "${GREEN}‚úÖ Environnement de production d√©marr√© rapidement !${NC}"
        
        echo -e "\n${CYAN}üìã √âtat des services:${NC}"
        docker-compose -f docker-compose.prod.yml ps
        
        echo -e "\n${CYAN}üåê Applications disponibles:${NC}"
        echo "   ‚Ä¢ Frontend Web: http://localhost:80"
        echo "   ‚Ä¢ API Backend: http://localhost:3000"
        echo "   ‚Ä¢ MongoDB: mongodb://localhost:27017"
        
        # Menu post-d√©marrage
        post_start_menu_prod "production"
    else
        echo -e "${RED}‚ùå Erreur lors du d√©marrage rapide${NC}"
        echo -e "${YELLOW}üí° Conseil: Utilisez l'option 2 (d√©marrage complet) si les images n'existent pas${NC}"
        pause
    fi
}

# Fonction pour d√©marrage rapide tests (sans rebuild)
quick_start_tests() {
    echo -e "\n${GREEN}‚ö° D√âMARRAGE RAPIDE - Environnement de tests${NC}"
    echo -e "${YELLOW}Mode: Containers existants (aucun rebuild)${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${BLUE}üöÄ D√©marrage des containers de test...${NC}"
    if docker-compose -f docker-compose.test.yml up -d; then
        echo -e "${GREEN}‚úÖ Environnement de test d√©marr√© rapidement !${NC}"
        
        echo -e "\n${CYAN}üìã √âtat des services:${NC}"
        docker-compose -f docker-compose.test.yml ps
        
        echo -e "\n${CYAN}üí° Pr√™t pour ex√©cuter des tests:${NC}"
        echo "   ‚Ä¢ Tests API: Option 19 du menu principal"
        echo "   ‚Ä¢ Tests manuels: docker-compose -f docker-compose.test.yml exec api npm test"
        
        echo -e "\n${YELLOW}üõë N'oubliez pas d'arr√™ter l'environnement apr√®s les tests !${NC}"
        echo "   Commande: docker-compose -f docker-compose.test.yml down"
        
        pause
    else
        echo -e "${RED}‚ùå Erreur lors du d√©marrage rapide${NC}"
        echo -e "${YELLOW}üí° Conseil: Utilisez l'option 19 (tests complets) si les images n'existent pas${NC}"
        pause
    fi
}

# Fonction pour d√©marrer un service sp√©cifique
start_service() {
    service=$(select_service "Quel service voulez-vous d√©marrer ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${GREEN}üîß D√©marrage du service: $service${NC}"
        if docker-compose up -d "$service"; then
            echo -e "${GREEN}‚úÖ Service $service d√©marr√© !${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors du d√©marrage du service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide. Veuillez choisir un num√©ro entre 1 et ${#SERVICES[@]}.${NC}"
    fi
    pause
}

# Fonction pour arr√™ter un service sp√©cifique
stop_service() {
    service=$(select_service "Quel service voulez-vous arr√™ter ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${RED}‚èπÔ∏è Arr√™t du service: $service${NC}"
        if docker-compose stop "$service"; then
            echo -e "${GREEN}‚úÖ Service $service arr√™t√© !${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de l'arr√™t du service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide. Veuillez choisir un num√©ro entre 1 et ${#SERVICES[@]}.${NC}"
    fi
    pause
}

# Fonction pour red√©marrer un service sp√©cifique
restart_service() {
    service=$(select_service "Quel service voulez-vous red√©marrer ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üîÑ Red√©marrage du service: $service${NC}"
        if docker-compose restart "$service"; then
            echo -e "${GREEN}‚úÖ Service $service red√©marr√© !${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors du red√©marrage du service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide. Veuillez choisir un num√©ro entre 1 et ${#SERVICES[@]}.${NC}"
    fi
    pause
}

# Fonction pour builder un service
build_service() {
    service=$(select_service "Quel service voulez-vous builder ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${BLUE}üèóÔ∏è Building du service: $service${NC}"
        echo "Choisissez le mode:"
        echo "  1) D√©veloppement (Dockerfile.dev)"
        echo "  2) Production (Dockerfile)"
        read -p "Mode (1-2): " mode_choice
        
        if [[ "$mode_choice" == "1" ]]; then
            docker-compose build --no-cache "$service"
            echo -e "${GREEN}‚úÖ Service $service build√© en mode d√©veloppement !${NC}"
        elif [[ "$mode_choice" == "2" ]]; then
            docker-compose -f docker-compose.prod.yml build --no-cache "$service"
            echo -e "${GREEN}‚úÖ Service $service build√© en mode production !${NC}"
        else
            echo -e "${RED}‚ùå Mode invalide${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide${NC}"
    fi
    pause
}

# Fonction pour voir les logs d'un service
view_logs() {
    service=$(select_service "De quel service voulez-vous voir les logs ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üìù Logs du service: $service${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo -e "${CYAN}Affichage des 50 derni√®res lignes de logs...${NC}"
        if docker-compose logs --tail=50 "$service"; then
            echo -e "\n${GREEN}‚úÖ Logs affich√©s avec succ√®s${NC}"
        else
            echo -e "\n${RED}‚ùå Erreur lors de l'affichage des logs pour le service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide. Veuillez choisir un num√©ro entre 1 et ${#SERVICES[@]}.${NC}"
    fi
    pause
}

# Fonction pour suivre les logs en temps r√©el
follow_logs() {
    service=$(select_service "De quel service voulez-vous suivre les logs ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${YELLOW}üìà Logs en temps r√©el du service: $service${NC}"
        echo -e "${CYAN}Appuyez sur Ctrl+C pour arr√™ter${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        if docker-compose logs -f "$service"; then
            echo -e "\n${GREEN}‚úÖ Suivi des logs termin√©${NC}"
        else
            echo -e "\n${RED}‚ùå Erreur lors du suivi des logs pour le service $service${NC}"
        fi
    else
        echo -e "${RED}‚ùå Service invalide. Veuillez choisir un num√©ro entre 1 et ${#SERVICES[@]}.${NC}"
    fi
    pause
}

# Fonction pour ouvrir les terminaux de logs depuis le menu
open_logs_terminals_menu() {
    echo -e "\n${CYAN}üñ•Ô∏è Ouverture des terminaux de logs...${NC}"
    echo "Quel environnement utilisez-vous ?"
    echo "  1) D√©veloppement (docker-compose.yml)"
    echo "  2) Production (docker-compose.prod.yml)"
    echo "  3) Test (docker-compose.test.yml)"
    read -p "Environnement (1-3): " env_choice
    
    case $env_choice in
        1)
            # V√©rifier que les services de d√©veloppement sont actifs
            if docker-compose ps | grep -q "Up"; then
                open_logs_terminals "d√©veloppement"
            else
                echo -e "${RED}‚ùå Aucun service de d√©veloppement en cours d'ex√©cution${NC}"
                echo -e "${YELLOW}üí° Lancez d'abord l'environnement de d√©veloppement (option 1)${NC}"
            fi
            ;;
        2)
            # V√©rifier que les services de production sont actifs
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
                open_logs_terminals_prod "production"
            else
                echo -e "${RED}‚ùå Aucun service de production en cours d'ex√©cution${NC}"
                echo -e "${YELLOW}üí° Lancez d'abord l'environnement de production (option 2)${NC}"
            fi
            ;;
        3)
            # V√©rifier que les services de test sont actifs
            if docker-compose -f docker-compose.test.yml ps | grep -q "Up"; then
                echo -e "\n${CYAN}üñ•Ô∏è Commandes pour logs des tests:${NC}"
                echo -e "${WHITE}# API Backend (test):${NC}"
                echo -e "${CYAN}docker-compose -f docker-compose.test.yml logs -f api${NC}"
                echo ""
                echo -e "${WHITE}# MongoDB Test Database:${NC}"
                echo -e "${CYAN}docker-compose -f docker-compose.test.yml logs -f db-test${NC}"
            else
                echo -e "${RED}‚ùå Aucun service de test en cours d'ex√©cution${NC}"
                echo -e "${YELLOW}üí° Lancez d'abord les tests (option 19)${NC}"
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Choix invalide${NC}"
            ;;
    esac
    pause
}

# Fonction pour ouvrir un shell dans un container
open_shell() {
    service=$(select_service "Dans quel container voulez-vous ouvrir un shell ?")
    if [[ -n "$service" ]]; then
        echo -e "\n${CYAN}üñ•Ô∏è Ouverture d'un shell dans: $service${NC}"
        
        # V√©rifier si le container est en cours d'ex√©cution
        if docker-compose ps "$service" | grep -q "Up"; then
            case "$service" in
                "web"|"api"|"mobile")
                    docker-compose exec "$service" /bin/sh
                    ;;
                "db")
                    echo "Choix disponibles:"
                    echo "  1) Shell bash/sh"
                    echo "  2) MongoDB shell (mongosh)"
                    read -p "Votre choix (1-2): " shell_choice
                    if [[ "$shell_choice" == "1" ]]; then
                        docker-compose exec "$service" /bin/bash
                    elif [[ "$shell_choice" == "2" ]]; then
                        docker-compose exec "$service" mongosh
                    fi
                    ;;
                *)
                    docker-compose exec "$service" /bin/sh
                    ;;
            esac
        else
            echo -e "${RED}‚ùå Le container $service n'est pas en cours d'ex√©cution${NC}"
            pause
        fi
    else
        echo -e "${RED}‚ùå Service invalide${NC}"
        pause
    fi
}

# Fonction pour arr√™ter tous les services
stop_all() {
    echo -e "\n${RED}üõë Arr√™t de TOUS les services...${NC}"
    docker-compose down
    docker-compose -f docker-compose.prod.yml down
    echo -e "${GREEN}‚úÖ Tous les services arr√™t√©s !${NC}"
    pause
}

# Fonction de nettoyage complet
cleanup() {
    echo -e "\n${RED}üßπ Options de nettoyage du projet...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${WHITE}Choisissez le type de nettoyage :${NC}"
    echo -e "${YELLOW}  1)${NC} üîÑ Nettoyage SOFT (containers + images, GARDE les volumes)"
    echo -e "${RED}  2)${NC} üí• Nettoyage COMPLET (containers + images + volumes - PERTE DE DONN√âES)"
    echo -e "${CYAN}  3)${NC} üìä Voir ce qui sera supprim√©"
    echo -e "${WHITE}  0)${NC} ‚ùå Annuler"
    echo ""
    read -p "Votre choix (0-3): " cleanup_choice
    
    case $cleanup_choice in
        1)
            echo -e "\n${YELLOW}üîÑ Nettoyage SOFT (pr√©servation des donn√©es)...${NC}"
            echo -e "${GREEN}‚úÖ Les volumes (base de donn√©es) seront PR√âSERV√âS${NC}"
            read -p "Continuer ? (y/N): " confirm
            
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "üõë Arr√™t des services..."
                docker-compose down
                docker-compose -f docker-compose.prod.yml down
                
                echo "üóëÔ∏è Suppression des images..."
                docker images | grep "$PROJECT_NAME" | awk '{print $3}' | xargs -r docker rmi -f
                
                echo "üßΩ Nettoyage des ressources non utilis√©es..."
                docker system prune -f
                
                echo -e "${GREEN}‚úÖ Nettoyage SOFT termin√© ! Donn√©es pr√©serv√©es.${NC}"
            else
                echo -e "${YELLOW}Nettoyage annul√©${NC}"
            fi
            ;;
        2)
            echo -e "\n${RED}üí• Nettoyage COMPLET (DESTRUCTEUR)...${NC}"
            echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cela va supprimer:${NC}"
            echo "   ‚Ä¢ Tous les containers"
            echo "   ‚Ä¢ Toutes les images du projet"
            echo -e "${RED}   ‚Ä¢ TOUS LES VOLUMES (base de donn√©es MongoDB)${NC}"
            echo -e "${RED}   ‚Ä¢ TOUS LES FICHIERS STOCK√âS${NC}"
            echo ""
            echo -e "${YELLOW}üí° Conseil: Utilisez l'option 14 (Backup) avant ce nettoyage${NC}"
            echo ""
            read -p "√ätes-vous VRAIMENT s√ªr ? Tapez 'DELETE' pour confirmer: " confirm
            
            if [[ "$confirm" == "DELETE" ]]; then
                echo "üõë Arr√™t des services..."
                docker-compose down -v
                docker-compose -f docker-compose.prod.yml down -v
                
                echo "üóëÔ∏è Suppression des images..."
                docker images | grep "$PROJECT_NAME" | awk '{print $3}' | xargs -r docker rmi -f
                
                echo "üßΩ Nettoyage des ressources non utilis√©es..."
                docker system prune -f
                
                echo -e "${GREEN}‚úÖ Nettoyage COMPLET termin√© ! Toutes les donn√©es supprim√©es.${NC}"
            else
                echo -e "${YELLOW}Nettoyage COMPLET annul√© (bonne d√©cision !)${NC}"
            fi
            ;;
        3)
            echo -e "\n${CYAN}üìä Analyse de ce qui serait supprim√©...${NC}"
            echo ""
            echo -e "${BLUE}üê≥ Containers en cours:${NC}"
            docker-compose ps
            echo ""
            echo -e "${BLUE}üñºÔ∏è Images du projet:${NC}"
            docker images | grep "$PROJECT_NAME" || echo "Aucune image trouv√©e"
            echo ""
            echo -e "${BLUE}üíæ Volumes du projet:${NC}"
            docker volume ls | grep "$PROJECT_NAME" || echo "Aucun volume nomm√© trouv√©"
            docker-compose config --volumes 2>/dev/null || echo "Utilisation des volumes d√©finis dans docker-compose.yml"
            echo ""
            echo -e "${YELLOW}üí° Volumes principaux:${NC}"
            echo "   ‚Ä¢ mongo-data (base de donn√©es MongoDB)"
            echo "   ‚Ä¢ Volumes de d√©veloppement (code mapp√©)"
            ;;
        0|*)
            echo -e "${YELLOW}Nettoyage annul√©${NC}"
            ;;
    esac
    pause
}

# Fonction de restart complet
full_restart() {
    echo -e "\n${YELLOW}üîÑ Restart complet du projet...${NC}"
    echo "Choisissez l'environnement:"
    echo "  1) D√©veloppement"
    echo "  2) Production"
    read -p "Environnement (1-2): " env_choice
    
    echo "üõë Arr√™t des services..."
    stop_all
    
    if [[ "$env_choice" == "1" ]]; then
        start_development
    elif [[ "$env_choice" == "2" ]]; then
        start_production
    else
        echo -e "${RED}‚ùå Choix invalide${NC}"
        pause
    fi
}

# Fonction de backup de la base de donn√©es
backup_database() {
    echo -e "\n${BLUE}üíæ Backup de la base de donn√©es MongoDB...${NC}"
    
    # V√©rifier si le container db est en cours d'ex√©cution
    if docker-compose ps db | grep -q "Up"; then
        backup_dir="./backups"
        mkdir -p "$backup_dir"
        
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_file="$backup_dir/mongodb_backup_$timestamp"
        
        echo "üì¶ Cr√©ation du backup..."
        docker-compose exec -T db mongodump --out /tmp/backup
        docker-compose exec -T db tar -czf "/tmp/backup_$timestamp.tar.gz" -C /tmp backup
        docker cp "$(docker-compose ps -q db):/tmp/backup_$timestamp.tar.gz" "$backup_file.tar.gz"
        
        echo -e "${GREEN}‚úÖ Backup cr√©√©: $backup_file.tar.gz${NC}"
    else
        echo -e "${RED}‚ùå Le container de base de donn√©es n'est pas en cours d'ex√©cution${NC}"
    fi
    pause
}

# Fonction pour voir l'utilisation des ressources
show_resources() {
    echo -e "\n${BLUE}üì¶ Utilisation des ressources Docker:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${CYAN}üíæ Utilisation du disque:${NC}"
    docker system df
    
    echo -e "\n${CYAN}üñ•Ô∏è Ressources des containers:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
    
    pause
}

# Fonction pour ouvrir les URLs de l'application
open_urls() {
    echo -e "\n${BLUE}üåê URLs de l'application SUPCHAT:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${GREEN}Frontend (Web):${NC}     http://localhost:80"
    echo -e "${GREEN}API (Backend):${NC}      http://localhost:3000"
    echo -e "${GREEN}API Health:${NC}         http://localhost:3000/api/health"
    echo -e "${GREEN}API Docs (Swagger):${NC} http://localhost:3000/api-docs"
    echo -e "${GREEN}MongoDB:${NC}            localhost:27017"
    echo -e "${GREEN}cAdvisor:${NC}           http://localhost:8080"
    echo ""
    
    read -p "Voulez-vous ouvrir une URL dans le navigateur ? (y/N): " open_browser
    if [[ "$open_browser" =~ ^[Yy]$ ]]; then
        echo "Quelle URL voulez-vous ouvrir ?"
        echo "  1) Frontend (Web)"
        echo "  2) API Health Check"
        echo "  3) API Documentation"
        echo "  4) cAdvisor (Monitoring)"
        read -p "Choix (1-4): " url_choice
        
        case "$url_choice" in
            1) xdg-open "http://localhost:80" 2>/dev/null || open "http://localhost:80" 2>/dev/null || start "http://localhost:80" 2>/dev/null ;;
            2) xdg-open "http://localhost:3000/api/health" 2>/dev/null || open "http://localhost:3000/api/health" 2>/dev/null || start "http://localhost:3000/api/health" 2>/dev/null ;;
            3) xdg-open "http://localhost:3000/api-docs" 2>/dev/null || open "http://localhost:3000/api-docs" 2>/dev/null || start "http://localhost:3000/api-docs" 2>/dev/null ;;
            4) xdg-open "http://localhost:8080" 2>/dev/null || open "http://localhost:8080" 2>/dev/null || start "http://localhost:8080" 2>/dev/null ;;
            *) echo -e "${RED}‚ùå Choix invalide${NC}" ;;
        esac
    fi
    pause
}

# Fonction de diagnostic des services
diagnostic_services() {
    echo -e "\n${BLUE}üîç Diagnostic des services Docker...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "\n${CYAN}üìã Services configur√©s dans le script:${NC}"
    for i in "${!SERVICES[@]}"; do
        echo "  $((i+1))) ${SERVICES[$i]}"
    done
    
    echo -e "\n${CYAN}üê≥ √âtat d√©taill√© des containers:${NC}"
    docker-compose ps -a
    
    echo -e "\n${CYAN}üîó Services dans docker-compose.yml:${NC}"
    docker-compose config --services 2>/dev/null || echo "Erreur lors de la lecture de docker-compose.yml"
    
    echo -e "\n${CYAN}üìä Test de connectivit√© aux services:${NC}"
    for service in "${SERVICES[@]}"; do
        echo -n "  ‚Ä¢ $service: "
        if docker-compose ps "$service" | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ En fonctionnement${NC}"
            echo "    Logs r√©cents:"
            docker-compose logs --tail=3 "$service" 2>/dev/null | sed 's/^/      /' || echo "      Erreur lors de la lecture des logs"
        else
            echo -e "${RED}‚ùå Arr√™t√© ou non trouv√©${NC}"
        fi
        echo ""
    done
    
    echo -e "${CYAN}üîß Informations de debugging:${NC}"
    echo "  ‚Ä¢ Docker version: $(docker --version 2>/dev/null || echo 'Non disponible')"
    echo "  ‚Ä¢ Docker Compose version: $(docker-compose --version 2>/dev/null || echo 'Non disponible')"
    echo "  ‚Ä¢ R√©pertoire courant: $(pwd)"
    echo "  ‚Ä¢ Fichiers docker-compose disponibles:"
    ls -la docker-compose*.yml 2>/dev/null | sed 's/^/    /' || echo "    Aucun fichier docker-compose trouv√©"
    
    pause
}

# Fonction pour lancer les tests automatis√©s
run_tests() {
    echo -e "\n${GREEN}üß™ Lancement des tests automatis√©s...${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # V√©rifier si docker-compose.test.yml existe
    if [[ ! -f "docker-compose.test.yml" ]]; then
        echo -e "${RED}‚ùå Erreur: docker-compose.test.yml non trouv√©${NC}"
        echo "Ce fichier est n√©cessaire pour l'environnement de test isol√©."
        pause
        return 1
    fi
    
    echo -e "\n${CYAN}üöÄ Options de test disponibles:${NC}"
    echo -e "${WHITE}  1)${NC} üèÉ Lancer tous les tests"
    echo -e "${WHITE}  2)${NC} üìä Lancer les tests avec couverture"
    echo -e "${WHITE}  3)${NC} üîç Tests sp√©cifiques (routes utilisateur)"
    echo -e "${WHITE}  4)${NC} üîß Mode debug (logs d√©taill√©s)"
    echo -e "${WHITE}  5)${NC} üßπ Nettoyer l'environnement de test"
    echo -e "${WHITE}  0)${NC} ‚ùå Retour au menu principal"
    echo ""
    read -p "Votre choix (0-5): " test_choice
    
    case $test_choice in
        1)
            echo -e "\n${BLUE}üöÄ D√©marrage de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml up -d
            
            echo -e "\n${BLUE}‚è≥ Attente que les services soient pr√™ts...${NC}"
            sleep 5
            
            echo -e "\n${GREEN}üß™ Ex√©cution de tous les tests...${NC}"
            docker-compose -f docker-compose.test.yml exec api npm test
            
            echo -e "\n${YELLOW}üõë Arr√™t de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml down
            ;;
        2)
            echo -e "\n${BLUE}üöÄ D√©marrage de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml up -d
            
            echo -e "\n${BLUE}‚è≥ Attente que les services soient pr√™ts...${NC}"
            sleep 5
            
            echo -e "\n${GREEN}üìä Ex√©cution des tests avec couverture...${NC}"
            docker-compose -f docker-compose.test.yml exec api npm run test:coverage
            
            echo -e "\n${YELLOW}üõë Arr√™t de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml down
            ;;
        3)
            echo -e "\n${BLUE}üöÄ D√©marrage de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml up -d
            
            echo -e "\n${BLUE}‚è≥ Attente que les services soient pr√™ts...${NC}"
            sleep 5
            
            echo -e "\n${GREEN}üîç Tests des routes utilisateur...${NC}"
            docker-compose -f docker-compose.test.yml exec api npm test -- --testNamePattern="user"
            
            echo -e "\n${YELLOW}üõë Arr√™t de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml down
            ;;
        4)
            echo -e "\n${BLUE}üöÄ D√©marrage de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml up -d
            
            echo -e "\n${BLUE}‚è≥ Attente que les services soient pr√™ts...${NC}"
            sleep 5
            
            echo -e "\n${GREEN}üîß Tests en mode debug...${NC}"
            echo -e "${CYAN}Logs d√©taill√©s activ√©s${NC}"
            docker-compose -f docker-compose.test.yml exec api sh -c "DEBUG=* npm test"
            
            echo -e "\n${YELLOW}üõë Arr√™t de l'environnement de test...${NC}"
            docker-compose -f docker-compose.test.yml down
            ;;
        5)
            echo -e "\n${YELLOW}üßπ Nettoyage de l'environnement de test...${NC}"
            echo -e "${RED}‚ö†Ô∏è  Cela va supprimer:${NC}"
            echo "   ‚Ä¢ Les containers de test"
            echo "   ‚Ä¢ Les volumes de test (base de donn√©es de test)"
            echo ""
            read -p "Confirmer le nettoyage ? (y/N): " confirm
            
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "üõë Arr√™t et suppression des containers de test..."
                docker-compose -f docker-compose.test.yml down -v
                
                echo "üóëÔ∏è Suppression des images de test..."
                docker images | grep "test" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null
                
                echo -e "${GREEN}‚úÖ Environnement de test nettoy√© !${NC}"
            else
                echo -e "${YELLOW}Nettoyage annul√©${NC}"
            fi
            ;;
        0)
            echo -e "${YELLOW}Retour au menu principal...${NC}"
            return 0
            ;;
        *)
            echo -e "\n${RED}‚ùå Choix invalide.${NC}"
            ;;
    esac
    
    echo -e "\n${CYAN}üí° Conseils pour les tests:${NC}"
    echo "   ‚Ä¢ Consultez docs/guides/GUIDE-TESTS-DOCKER.md pour plus d'informations"
    echo "   ‚Ä¢ Les tests utilisent une base de donn√©es isol√©e (db-test)"
    echo "   ‚Ä¢ Aucune donn√©e de d√©veloppement n'est affect√©e"
    
    pause
}

# Fonction pour lancer automatiquement les t√¢ches VS Code de logs
launch_vscode_logs_task() {
    local environment="$1"
    local task_name=""
    
    if [[ "$environment" == "d√©veloppement" ]]; then
        task_name="üöÄ Ouvrir TOUS les Logs (D√©veloppement)"
    else
        task_name="üè≠ Ouvrir TOUS les Logs (Production)"
    fi
    
    echo -e "\n${CYAN}üöÄ Tentative de lancement automatique de la t√¢che VS Code...${NC}"
    
    # V√©rifier si la commande 'code' est disponible
    if command -v code &> /dev/null; then
        echo -e "${GREEN}‚úÖ VS Code CLI d√©tect√© !${NC}"
        
        # V√©rifier si VS Code est d√©j√† ouvert dans ce workspace
        local workspace_path="$(pwd)"
        
        # M√©thode 1: Essayer de lancer la t√¢che directement
        echo -e "${YELLOW}üéØ Tentative de lancement direct de la t√¢che...${NC}"
        
        # Utiliser une approche JSON pour d√©clencher la t√¢che
        local temp_script="/tmp/launch_vscode_task.sh"
        cat > "$temp_script" << EOF
#!/bin/bash
# Script temporaire pour lancer la t√¢che VS Code
echo "Lancement de la t√¢che VS Code: $task_name"
cd "$workspace_path"
code --command "workbench.action.tasks.runTask" --args "$task_name" . 2>/dev/null &
sleep 2
exit 0
EOF
        
        chmod +x "$temp_script"
        
        if "$temp_script" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Commande lanc√©e !${NC}"
            echo -e "${CYAN}‚û°Ô∏è  Si VS Code est ouvert, la t√¢che '${task_name}' devrait se lancer automatiquement${NC}"
            echo -e "${YELLOW}üìù Sinon, utilisez Ctrl+Shift+P dans VS Code et tapez le nom de la t√¢che${NC}"
            rm -f "$temp_script" 2>/dev/null
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Lancement direct √©chou√©, ouverture de VS Code...${NC}"
            rm -f "$temp_script" 2>/dev/null
        fi
        
        # M√©thode 2: Ouvrir VS Code dans le workspace
        echo -e "${YELLOW}üìÇ Ouverture de VS Code dans le workspace...${NC}"
        
        if code "$workspace_path" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ VS Code ouvert avec succ√®s !${NC}"
            echo -e "${CYAN}‚û°Ô∏è  Dans VS Code:${NC}"
            echo -e "   1. Appuyez sur ${WHITE}Ctrl+Shift+P${NC}"
            echo -e "   2. Tapez: ${YELLOW}${task_name}${NC}"
            echo -e "   3. Appuyez sur ${WHITE}Entr√©e${NC}"
            echo -e "${GREEN}üéâ Tous les logs s'ouvriront automatiquement !${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Erreur lors de l'ouverture de VS Code${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå VS Code CLI ('code') non trouv√© dans le PATH${NC}"
        echo -e "${YELLOW}üí° Pour installer VS Code CLI:${NC}"
        echo -e "   1. Ouvrez VS Code"
        echo -e "   2. ${WHITE}Ctrl+Shift+P${NC} ‚Üí tapez: ${CYAN}Shell Command: Install 'code' command in PATH${NC}"
        echo -e "   3. Red√©marrez votre terminal"
        echo -e "   4. Relancez ce script"
        return 1
    fi
}

# Fonction principale
main() {
    while true; do
        show_header
        show_status
        show_menu
        
        read -p "Votre choix: " choice
        
        case $choice in
            1) start_development ;;
            2) start_production ;;
            3) start_service ;;
            4) stop_service ;;
            5) restart_service ;;
            6) build_service ;;
            7) show_status; pause ;;
            8) view_logs ;;
            9) follow_logs ;;
            10) open_shell ;;
            11) open_logs_terminals_menu ;;
            12) stop_all ;;
            13) cleanup ;;
            14) full_restart ;;
            15) backup_database ;;
            16) show_resources ;;
            17) open_urls ;;
            18) diagnostic_services ;;
            19) run_tests ;;
            20) quick_start_development ;;
            21) quick_start_production ;;
            22) quick_start_tests ;;
            0) 
                echo -e "\n${GREEN}üëã Au revoir !${NC}"
                exit 0
                ;;
            *)
                echo -e "\n${RED}‚ùå Choix invalide. Veuillez r√©essayer.${NC}"
                pause
                ;;
        esac
    done
}

# V√©rifier que Docker et Docker Compose sont install√©s
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√© ou n'est pas dans le PATH${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√© ou n'est pas dans le PATH${NC}"
    exit 1
fi

# V√©rifier que nous sommes dans le bon r√©pertoire
if [[ ! -f "docker-compose.yml" ]]; then
    echo -e "${RED}‚ùå Fichier docker-compose.yml non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire racine du projet.${NC}"
    exit 1
fi

# Lancer le script principal
main
