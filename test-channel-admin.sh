#!/bin/bash

echo "üß™ Test de cr√©ation de canal et v√©rification des droits d'admin"
echo "============================================================"

# Variables
API_URL="http://localhost:3000/api"
COOKIE_FILE="cookies.txt"

# Email et mot de passe (remplacez par vos vraies credentials)
EMAIL="admin@example.com"
PASSWORD="motdepasse"

# 1. Connexion
echo "üìù 1. Connexion..."
LOGIN_RESPONSE=$(curl -s -c "$COOKIE_FILE" -X POST "$API_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}")

echo "R√©ponse de connexion: $LOGIN_RESPONSE"

# Extraire le token de la r√©ponse (si dans le body)
TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token // empty')

if [ -z "$TOKEN" ]; then
  echo "‚ùå Impossible de r√©cup√©rer le token de connexion"
  exit 1
fi

echo "‚úÖ Connexion r√©ussie, token: ${TOKEN:0:50}..."

# 2. R√©cup√©rer la liste des workspaces
echo -e "\nüìÅ 2. R√©cup√©ration des workspaces..."
WORKSPACES_RESPONSE=$(curl -s -b "$COOKIE_FILE" \
  -H "Authorization: Bearer $TOKEN" \
  "$API_URL/workspaces")

echo "Workspaces: $WORKSPACES_RESPONSE"

# Extraire le premier workspace ID
WORKSPACE_ID=$(echo "$WORKSPACES_RESPONSE" | jq -r '.[0]._id // empty')

if [ -z "$WORKSPACE_ID" ]; then
  echo "‚ùå Aucun workspace trouv√©"
  exit 1
fi

echo "‚úÖ Workspace trouv√©: $WORKSPACE_ID"

# 3. Cr√©er un canal de test
echo -e "\nüîß 3. Cr√©ation d'un canal de test..."
CHANNEL_NAME="test-channel-$(date +%s)"
CREATE_RESPONSE=$(curl -s -b "$COOKIE_FILE" -X POST "$API_URL/channels" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{\"name\":\"$CHANNEL_NAME\",\"workspaceId\":\"$WORKSPACE_ID\",\"type\":\"private\",\"description\":\"Canal de test\"}")

echo "R√©ponse de cr√©ation: $CREATE_RESPONSE"

# Extraire l'ID du canal cr√©√©
CHANNEL_ID=$(echo "$CREATE_RESPONSE" | jq -r '.channel._id // .channel.id // empty')

if [ -z "$CHANNEL_ID" ]; then
  echo "‚ùå Impossible de cr√©er le canal"
  exit 1
fi

echo "‚úÖ Canal cr√©√© avec succ√®s: $CHANNEL_ID"

# 4. V√©rifier les permissions du cr√©ateur
echo -e "\nüîç 4. V√©rification des permissions du cr√©ateur..."
PERMISSIONS_RESPONSE=$(curl -s -b "$COOKIE_FILE" \
  -H "Authorization: Bearer $TOKEN" \
  "$API_URL/permissions?workspaceId=$WORKSPACE_ID")

echo "Permissions dans le workspace: $PERMISSIONS_RESPONSE"

# Chercher les permissions de l'utilisateur actuel
USER_PERMS=$(echo "$PERMISSIONS_RESPONSE" | jq -r ".[] | select(.userId.email == \"$EMAIL\")")

if [ -z "$USER_PERMS" ]; then
  echo "‚ùå Permissions utilisateur non trouv√©es"
  exit 1
fi

echo "‚úÖ Permissions utilisateur trouv√©es"

# V√©rifier s'il y a un r√¥le admin pour ce canal
CHANNEL_ADMIN_ROLE=$(echo "$USER_PERMS" | jq -r ".channelRoles[] | select(.channelId == \"$CHANNEL_ID\" and .role == \"admin\") | .role")

if [ "$CHANNEL_ADMIN_ROLE" = "admin" ]; then
  echo "‚úÖ SUCCESS: Le cr√©ateur du canal a bien le r√¥le admin sur le canal!"
else
  echo "‚ùå √âCHEC: Le cr√©ateur du canal n'a PAS le r√¥le admin sur le canal"
  echo "R√¥les de canal trouv√©s:"
  echo "$USER_PERMS" | jq '.channelRoles'
fi

# 5. Nettoyer : supprimer le canal de test
echo -e "\nüßπ 5. Nettoyage - Suppression du canal de test..."
DELETE_RESPONSE=$(curl -s -b "$COOKIE_FILE" -X DELETE "$API_URL/channels/$CHANNEL_ID" \
  -H "Authorization: Bearer $TOKEN")

echo "R√©ponse de suppression: $DELETE_RESPONSE"

echo -e "\nüèÅ Test termin√©!"
