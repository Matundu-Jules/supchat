# 🚀 SUPCHAT - Guide de Configuration et Démarrage

## 📋 Description du Projet

SupChat est une application de messagerie collaborative composée de :
- **Backend API** (Node.js + MongoDB) dans `supchat-server/`
- **Frontend Web** (React + TypeScript + Vite) dans `client-web/`
- **Application Mobile** (React Native + Expo) dans `client-mobile/`

## 🛠️ Méthodes de Démarrage

### Méthode 1: Docker Compose (Recommandée pour le livrable)
### Méthode 2: Développement Local (Pour le développement)

---

## 🐳 MÉTHODE 1: DOCKER COMPOSE (PRODUCTION)

### Prérequis
- Docker et Docker Compose installés
- Ports 80, 3000, 27017 disponibles

### Étapes de démarrage

1. **Cloner le projet et aller à la racine**
```bash
cd supchat-1/
```

2. **Vérifier la configuration .env**
Le fichier `.env` à la racine contient toute la configuration nécessaire.
Les variables importantes pour Docker :
- `NODE_ENV=production`
- `MONGO_HOST=db` (utilise le service Docker)
- Tous les secrets OAuth et JWT configurés

3. **Lancer tous les services**
```bash
# Lancer tous les services (API + Web + Mobile + DB)
docker-compose up -d

# Ou lancer service par service
docker-compose up db          # Base de données MongoDB
docker-compose up api         # API Backend 
docker-compose up web         # Client Web
docker-compose up mobile      # Client Mobile
```

4. **Accéder aux applications**
- **Web App**: http://localhost (port 80)
- **API**: http://localhost:3000
- **MongoDB**: localhost:27017 (accès local seulement)
- **Monitoring**: http://localhost:8005 (cAdvisor)

5. **Arrêter les services**
```bash
docker-compose down
```

### Variables d'environnement Docker

Dans Docker, les services communiquent via les noms de services :
- `api` → Service backend
- `db` → Service MongoDB
- `web` → Service frontend
- `mobile` → Service mobile

---

## 💻 MÉTHODE 2: DÉVELOPPEMENT LOCAL

### Prérequis
- Node.js >= 18
- MongoDB installé localement OU Docker pour la DB
- npm ou yarn

### 🗄️ Étape 1: Base de données

**Option A: MongoDB avec Docker (Recommandé)**
```bash
docker-compose up db
```

**Option B: MongoDB local**
```bash
# Installer MongoDB localement et démarrer le service
mongod --dbpath /path/to/your/db
```

### 🔧 Étape 2: Configuration Backend

```bash
cd supchat-server/
cp .env.example .env  # Si pas déjà fait
```

Vérifier le fichier `supchat-server/.env` :
```bash
NODE_ENV=development
MONGO_HOST=localhost  # Pour développement local
PORT=3000
# ... autres variables déjà configurées
```

Installer et démarrer :
```bash
npm install
npm start
```

### 🌐 Étape 3: Client Web

```bash
cd client-web/
cp .env.example .env  # Si pas déjà fait
```

Vérifier le fichier `client-web/.env` :
```bash
VITE_API_URL=http://localhost:3000
VITE_WEBSOCKET_URL=http://localhost:3000
# ... autres variables déjà configurées
```

Installer et démarrer :
```bash
npm install
npm run dev  # Démarre sur http://localhost:5173
```

### 📱 Étape 4: Client Mobile

```bash
cd client-mobile/
```

**IMPORTANT**: Modifier `client-mobile/.env` avec votre IP locale :
```bash
# Trouver votre IP locale
ipconfig        # Windows
ifconfig        # Mac/Linux

# Modifier dans client-mobile/.env
EXPO_PUBLIC_HOST=192.168.1.XXX  # Votre IP
EXPO_PUBLIC_API_URL=http://192.168.1.XXX:3000/api
```

Installer et démarrer :
```bash
npm install
npm start  # Ou expo start
```

---

## 🔐 CONFIGURATION OAUTH (Déjà configurée)

### Google OAuth
- Client ID: `991869916796-re5ejvbv6d4h825kfog0u2k870tqda1c.apps.googleusercontent.com`
- Redirect URI: `http://localhost:3000/api/auth/google/callback`

### Facebook OAuth  
- App ID: `766701949015755`
- Redirect URI: `http://localhost:3000/api/auth/facebook/callback`

⚠️ **Note**: Les secrets OAuth sont configurés côté serveur uniquement pour la sécurité.

---

## 🧪 TESTS

### Tests Backend
```bash
cd supchat-server/
npm test
```

### Tests Frontend Web
```bash
cd client-web/
npm test              # Tests unitaires
npm run test:coverage # Couverture de code
```

---

## 📂 STRUCTURE DES VARIABLES D'ENVIRONNEMENT

### Fichier `.env` (Racine - Docker)
```
NODE_ENV=production
PORT=3000
MONGO_HOST=db  # Service Docker
JWT_SECRET=...
GOOGLE_CLIENT_SECRET=...
# Variables pour tous les services en Docker
```

### Fichier `supchat-server/.env` (Développement)
```
NODE_ENV=development  
MONGO_HOST=localhost  # Développement local
# Variables spécifiques au backend
```

### Fichier `client-web/.env` (Développement)
```
VITE_API_URL=http://localhost:3000
# Variables côté client web (préfixe VITE_)
```

### Fichier `client-mobile/.env` (Développement)
```
EXPO_PUBLIC_API_URL=http://192.168.X.X:3000/api
# Variables côté mobile (préfixe EXPO_PUBLIC_)
```

---

## 🚨 DÉPANNAGE

### Problème: Cannot connect to API
- Vérifier que l'API tourne sur le bon port
- En Docker: utiliser le nom du service `api` au lieu de `localhost`
- En local: vérifier `localhost:3000`

### Problème: Mobile ne se connecte pas
- Vérifier l'IP dans `client-mobile/.env`
- S'assurer que PC et téléphone sont sur le même réseau WiFi
- Vérifier le firewall Windows/Mac

### Problème: Base de données
- En Docker: `docker-compose logs db`
- En local: vérifier que MongoDB tourne

### Problème: Ports déjà utilisés
```bash
# Voir qui utilise le port 3000
netstat -ano | findstr :3000  # Windows
lsof -i :3000                 # Mac/Linux
```

---

## 📋 CHECKLIST LIVRABLE

- ✅ Docker Compose fonctionne avec `docker-compose up`
- ✅ 3 services minimum : api, web, db
- ✅ Pas de secrets dans le code source
- ✅ Variables d'environnement configurées
- ✅ Documentation technique et utilisateur
- ✅ Architecture serveur-client respectée

---

## 🏗️ ARCHITECTURE

```
supchat-1/
├── .env                    # Configuration Docker Compose
├── docker-compose.yml     # Orchestration des services
├── supchat-server/        # Backend API (Node.js)
│   ├── .env              # Config développement backend
│   └── Dockerfile
├── client-web/           # Frontend Web (React)
│   ├── .env             # Config développement web
│   └── Dockerfile
├── client-mobile/       # App Mobile (React Native)
│   └── .env            # Config développement mobile
└── documentation/      # Docs techniques et utilisateur
```

## 📞 CONTACT

Pour toute question technique, consulter :
- README.md de chaque service
- Documentation dans `supchat-docs/`
- Logs Docker : `docker-compose logs [service]`
